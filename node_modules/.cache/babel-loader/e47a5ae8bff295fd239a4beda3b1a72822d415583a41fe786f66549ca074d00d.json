{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport { ApolloCache } from 'apollo-cache';\nimport { isTest, getQueryDefinition, assign, getDefaultValues, isEqual, getMainDefinition, getFragmentDefinitions, createFragmentMap, shouldInclude, isField, resultKeyNameFromField, isInlineFragment, mergeDeepArray, argumentsObjectFromField, getDirectiveInfoFromField, maybeDeepFreeze, isIdValue, getStoreKeyName, toIdValue, isJsonValue, canUseWeakMap, getOperationDefinition, isProduction, storeKeyNameFromField, addTypenameToDocument } from 'apollo-utilities';\nimport { wrap, KeyTrie } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nvar haveWarned = false;\nfunction shouldWarn() {\n  var answer = !haveWarned;\n  if (!isTest()) {\n    haveWarned = true;\n  }\n  return answer;\n}\nvar HeuristicFragmentMatcher = function () {\n  function HeuristicFragmentMatcher() {}\n  HeuristicFragmentMatcher.prototype.ensureReady = function () {\n    return Promise.resolve();\n  };\n  HeuristicFragmentMatcher.prototype.canBypassInit = function () {\n    return true;\n  };\n  HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n    var obj = context.store.get(idValue.id);\n    var isRootQuery = idValue.id === 'ROOT_QUERY';\n    if (!obj) {\n      return isRootQuery;\n    }\n    var _a = obj.__typename,\n      __typename = _a === void 0 ? isRootQuery && 'Query' : _a;\n    if (!__typename) {\n      if (shouldWarn()) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"You're using fragments in your queries, but either don't have the addTypename:\\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\\n   can accurately match fragments.\");\n        process.env.NODE_ENV === \"production\" || invariant.warn('Could not find __typename on Fragment ', typeCondition, obj);\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"DEPRECATION WARNING: using fragments without __typename is unsupported behavior \" + \"and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.\");\n      }\n      return 'heuristic';\n    }\n    if (__typename === typeCondition) {\n      return true;\n    }\n    if (shouldWarn()) {\n      process.env.NODE_ENV === \"production\" || invariant.error('You are using the simple (heuristic) fragment matcher, but your ' + 'queries contain union or interface types. Apollo Client will not be ' + 'able to accurately map fragments. To make this error go away, use ' + 'the `IntrospectionFragmentMatcher` as described in the docs: ' + 'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher');\n    }\n    return 'heuristic';\n  };\n  return HeuristicFragmentMatcher;\n}();\nvar IntrospectionFragmentMatcher = function () {\n  function IntrospectionFragmentMatcher(options) {\n    if (options && options.introspectionQueryResultData) {\n      this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);\n      this.isReady = true;\n    } else {\n      this.isReady = false;\n    }\n    this.match = this.match.bind(this);\n  }\n  IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n    process.env.NODE_ENV === \"production\" ? invariant(this.isReady, 1) : invariant(this.isReady, 'FragmentMatcher.match() was called before FragmentMatcher.init()');\n    var obj = context.store.get(idValue.id);\n    var isRootQuery = idValue.id === 'ROOT_QUERY';\n    if (!obj) {\n      return isRootQuery;\n    }\n    var _a = obj.__typename,\n      __typename = _a === void 0 ? isRootQuery && 'Query' : _a;\n    process.env.NODE_ENV === \"production\" ? invariant(__typename, 2) : invariant(__typename, \"Cannot match fragment because __typename property is missing: \" + JSON.stringify(obj));\n    if (__typename === typeCondition) {\n      return true;\n    }\n    var implementingTypes = this.possibleTypesMap[typeCondition];\n    if (__typename && implementingTypes && implementingTypes.indexOf(__typename) > -1) {\n      return true;\n    }\n    return false;\n  };\n  IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {\n    var typeMap = {};\n    introspectionResultData.__schema.types.forEach(function (type) {\n      if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n        typeMap[type.name] = type.possibleTypes.map(function (implementingType) {\n          return implementingType.name;\n        });\n      }\n    });\n    return typeMap;\n  };\n  return IntrospectionFragmentMatcher;\n}();\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar DepTrackingCache = function () {\n  function DepTrackingCache(data) {\n    var _this = this;\n    if (data === void 0) {\n      data = Object.create(null);\n    }\n    this.data = data;\n    this.depend = wrap(function (dataId) {\n      return _this.data[dataId];\n    }, {\n      disposable: true,\n      makeCacheKey: function (dataId) {\n        return dataId;\n      }\n    });\n  }\n  DepTrackingCache.prototype.toObject = function () {\n    return this.data;\n  };\n  DepTrackingCache.prototype.get = function (dataId) {\n    this.depend(dataId);\n    return this.data[dataId];\n  };\n  DepTrackingCache.prototype.set = function (dataId, value) {\n    var oldValue = this.data[dataId];\n    if (value !== oldValue) {\n      this.data[dataId] = value;\n      this.depend.dirty(dataId);\n    }\n  };\n  DepTrackingCache.prototype.delete = function (dataId) {\n    if (hasOwn.call(this.data, dataId)) {\n      delete this.data[dataId];\n      this.depend.dirty(dataId);\n    }\n  };\n  DepTrackingCache.prototype.clear = function () {\n    this.replace(null);\n  };\n  DepTrackingCache.prototype.replace = function (newData) {\n    var _this = this;\n    if (newData) {\n      Object.keys(newData).forEach(function (dataId) {\n        _this.set(dataId, newData[dataId]);\n      });\n      Object.keys(this.data).forEach(function (dataId) {\n        if (!hasOwn.call(newData, dataId)) {\n          _this.delete(dataId);\n        }\n      });\n    } else {\n      Object.keys(this.data).forEach(function (dataId) {\n        _this.delete(dataId);\n      });\n    }\n  };\n  return DepTrackingCache;\n}();\nfunction defaultNormalizedCacheFactory(seed) {\n  return new DepTrackingCache(seed);\n}\nvar StoreReader = function () {\n  function StoreReader(_a) {\n    var _this = this;\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.cacheKeyRoot,\n      cacheKeyRoot = _c === void 0 ? new KeyTrie(canUseWeakMap) : _c,\n      _d = _b.freezeResults,\n      freezeResults = _d === void 0 ? false : _d;\n    var _e = this,\n      executeStoreQuery = _e.executeStoreQuery,\n      executeSelectionSet = _e.executeSelectionSet,\n      executeSubSelectedArray = _e.executeSubSelectedArray;\n    this.freezeResults = freezeResults;\n    this.executeStoreQuery = wrap(function (options) {\n      return executeStoreQuery.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var query = _a.query,\n          rootValue = _a.rootValue,\n          contextValue = _a.contextValue,\n          variableValues = _a.variableValues,\n          fragmentMatcher = _a.fragmentMatcher;\n        if (contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(contextValue.store, query, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);\n        }\n      }\n    });\n    this.executeSelectionSet = wrap(function (options) {\n      return executeSelectionSet.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var selectionSet = _a.selectionSet,\n          rootValue = _a.rootValue,\n          execContext = _a.execContext;\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(execContext.contextValue.store, selectionSet, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      return executeSubSelectedArray.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n          array = _a.array,\n          execContext = _a.execContext;\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(execContext.contextValue.store, field, array, JSON.stringify(execContext.variableValues));\n        }\n      }\n    });\n  }\n  StoreReader.prototype.readQueryFromStore = function (options) {\n    return this.diffQueryAgainstStore(__assign(__assign({}, options), {\n      returnPartialData: false\n    })).result;\n  };\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n      query = _a.query,\n      variables = _a.variables,\n      previousResult = _a.previousResult,\n      _b = _a.returnPartialData,\n      returnPartialData = _b === void 0 ? true : _b,\n      _c = _a.rootId,\n      rootId = _c === void 0 ? 'ROOT_QUERY' : _c,\n      fragmentMatcherFunction = _a.fragmentMatcherFunction,\n      config = _a.config;\n    var queryDefinition = getQueryDefinition(query);\n    variables = assign({}, getDefaultValues(queryDefinition), variables);\n    var context = {\n      store: store,\n      dataIdFromObject: config && config.dataIdFromObject,\n      cacheRedirects: config && config.cacheRedirects || {}\n    };\n    var execResult = this.executeStoreQuery({\n      query: query,\n      rootValue: {\n        type: 'id',\n        id: rootId,\n        generated: true,\n        typename: 'Query'\n      },\n      contextValue: context,\n      variableValues: variables,\n      fragmentMatcher: fragmentMatcherFunction\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n    if (hasMissingFields && !returnPartialData) {\n      execResult.missing.forEach(function (info) {\n        if (info.tolerable) return;\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n      });\n    }\n    if (previousResult) {\n      if (isEqual(previousResult, execResult.result)) {\n        execResult.result = previousResult;\n      }\n    }\n    return {\n      result: execResult.result,\n      complete: !hasMissingFields\n    };\n  };\n  StoreReader.prototype.executeStoreQuery = function (_a) {\n    var query = _a.query,\n      rootValue = _a.rootValue,\n      contextValue = _a.contextValue,\n      variableValues = _a.variableValues,\n      _b = _a.fragmentMatcher,\n      fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;\n    var mainDefinition = getMainDefinition(query);\n    var fragments = getFragmentDefinitions(query);\n    var fragmentMap = createFragmentMap(fragments);\n    var execContext = {\n      query: query,\n      fragmentMap: fragmentMap,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      fragmentMatcher: fragmentMatcher\n    };\n    return this.executeSelectionSet({\n      selectionSet: mainDefinition.selectionSet,\n      rootValue: rootValue,\n      execContext: execContext\n    });\n  };\n  StoreReader.prototype.executeSelectionSet = function (_a) {\n    var _this = this;\n    var selectionSet = _a.selectionSet,\n      rootValue = _a.rootValue,\n      execContext = _a.execContext;\n    var fragmentMap = execContext.fragmentMap,\n      contextValue = execContext.contextValue,\n      variables = execContext.variableValues;\n    var finalResult = {\n      result: null\n    };\n    var objectsToMerge = [];\n    var object = contextValue.store.get(rootValue.id);\n    var typename = object && object.__typename || rootValue.id === 'ROOT_QUERY' && 'Query' || void 0;\n    function handleMissing(result) {\n      var _a;\n      if (result.missing) {\n        finalResult.missing = finalResult.missing || [];\n        (_a = finalResult.missing).push.apply(_a, result.missing);\n      }\n      return result.result;\n    }\n    selectionSet.selections.forEach(function (selection) {\n      var _a;\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n      if (isField(selection)) {\n        var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));\n        if (typeof fieldResult !== 'undefined') {\n          objectsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n        }\n      } else {\n        var fragment = void 0;\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          fragment = fragmentMap[selection.name.value];\n          if (!fragment) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(9) : new InvariantError(\"No fragment named \" + selection.name.value);\n          }\n        }\n        var typeCondition = fragment.typeCondition && fragment.typeCondition.name.value;\n        var match = !typeCondition || execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n        if (match) {\n          var fragmentExecResult = _this.executeSelectionSet({\n            selectionSet: fragment.selectionSet,\n            rootValue: rootValue,\n            execContext: execContext\n          });\n          if (match === 'heuristic' && fragmentExecResult.missing) {\n            fragmentExecResult = __assign(__assign({}, fragmentExecResult), {\n              missing: fragmentExecResult.missing.map(function (info) {\n                return __assign(__assign({}, info), {\n                  tolerable: true\n                });\n              })\n            });\n          }\n          objectsToMerge.push(handleMissing(fragmentExecResult));\n        }\n      }\n    });\n    finalResult.result = mergeDeepArray(objectsToMerge);\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n    return finalResult;\n  };\n  StoreReader.prototype.executeField = function (object, typename, field, execContext) {\n    var variables = execContext.variableValues,\n      contextValue = execContext.contextValue;\n    var fieldName = field.name.value;\n    var args = argumentsObjectFromField(field, variables);\n    var info = {\n      resultKey: resultKeyNameFromField(field),\n      directives: getDirectiveInfoFromField(field, variables)\n    };\n    var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);\n    if (Array.isArray(readStoreResult.result)) {\n      return this.combineExecResults(readStoreResult, this.executeSubSelectedArray({\n        field: field,\n        array: readStoreResult.result,\n        execContext: execContext\n      }));\n    }\n    if (!field.selectionSet) {\n      assertSelectionSetForIdValue(field, readStoreResult.result);\n      if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n        maybeDeepFreeze(readStoreResult);\n      }\n      return readStoreResult;\n    }\n    if (readStoreResult.result == null) {\n      return readStoreResult;\n    }\n    return this.combineExecResults(readStoreResult, this.executeSelectionSet({\n      selectionSet: field.selectionSet,\n      rootValue: readStoreResult.result,\n      execContext: execContext\n    }));\n  };\n  StoreReader.prototype.combineExecResults = function () {\n    var execResults = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      execResults[_i] = arguments[_i];\n    }\n    var missing;\n    execResults.forEach(function (execResult) {\n      if (execResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, execResult.missing);\n      }\n    });\n    return {\n      result: execResults.pop().result,\n      missing: missing\n    };\n  };\n  StoreReader.prototype.executeSubSelectedArray = function (_a) {\n    var _this = this;\n    var field = _a.field,\n      array = _a.array,\n      execContext = _a.execContext;\n    var missing;\n    function handleMissing(childResult) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n      return childResult.result;\n    }\n    array = array.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          execContext: execContext\n        }));\n      }\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          rootValue: item,\n          execContext: execContext\n        }));\n      }\n      assertSelectionSetForIdValue(field, item);\n      return item;\n    });\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n    return {\n      result: array,\n      missing: missing\n    };\n  };\n  return StoreReader;\n}();\nfunction assertSelectionSetForIdValue(field, value) {\n  if (!field.selectionSet && isIdValue(value)) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(10) : new InvariantError(\"Missing selection set for object of type \" + value.typename + \" returned for query field \" + field.name.value);\n  }\n}\nfunction defaultFragmentMatcher() {\n  return true;\n}\nfunction assertIdValue(idValue) {\n  process.env.NODE_ENV === \"production\" ? invariant(isIdValue(idValue), 11) : invariant(isIdValue(idValue), \"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n}\nfunction readStoreResolver(object, typename, fieldName, args, context, _a) {\n  var resultKey = _a.resultKey,\n    directives = _a.directives;\n  var storeKeyName = fieldName;\n  if (args || directives) {\n    storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n  }\n  var fieldValue = void 0;\n  if (object) {\n    fieldValue = object[storeKeyName];\n    if (typeof fieldValue === 'undefined' && context.cacheRedirects && typeof typename === 'string') {\n      var type = context.cacheRedirects[typename];\n      if (type) {\n        var resolver = type[fieldName];\n        if (resolver) {\n          fieldValue = resolver(object, args, {\n            getCacheKey: function (storeObj) {\n              var id = context.dataIdFromObject(storeObj);\n              return id && toIdValue({\n                id: id,\n                typename: storeObj.__typename\n              });\n            }\n          });\n        }\n      }\n    }\n  }\n  if (typeof fieldValue === 'undefined') {\n    return {\n      result: fieldValue,\n      missing: [{\n        object: object,\n        fieldName: storeKeyName,\n        tolerable: false\n      }]\n    };\n  }\n  if (isJsonValue(fieldValue)) {\n    fieldValue = fieldValue.json;\n  }\n  return {\n    result: fieldValue\n  };\n}\nvar ObjectCache = function () {\n  function ObjectCache(data) {\n    if (data === void 0) {\n      data = Object.create(null);\n    }\n    this.data = data;\n  }\n  ObjectCache.prototype.toObject = function () {\n    return this.data;\n  };\n  ObjectCache.prototype.get = function (dataId) {\n    return this.data[dataId];\n  };\n  ObjectCache.prototype.set = function (dataId, value) {\n    this.data[dataId] = value;\n  };\n  ObjectCache.prototype.delete = function (dataId) {\n    this.data[dataId] = void 0;\n  };\n  ObjectCache.prototype.clear = function () {\n    this.data = Object.create(null);\n  };\n  ObjectCache.prototype.replace = function (newData) {\n    this.data = newData || Object.create(null);\n  };\n  return ObjectCache;\n}();\nfunction defaultNormalizedCacheFactory$1(seed) {\n  return new ObjectCache(seed);\n}\nvar WriteError = function (_super) {\n  __extends(WriteError, _super);\n  function WriteError() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'WriteError';\n    return _this;\n  }\n  return WriteError;\n}(Error);\nfunction enhanceErrorWithDocument(error, document) {\n  var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + JSON.stringify(document));\n  enhancedError.message += '\\n' + error.message;\n  enhancedError.stack = error.stack;\n  return enhancedError;\n}\nvar StoreWriter = function () {\n  function StoreWriter() {}\n  StoreWriter.prototype.writeQueryToStore = function (_a) {\n    var query = _a.query,\n      result = _a.result,\n      _b = _a.store,\n      store = _b === void 0 ? defaultNormalizedCacheFactory() : _b,\n      variables = _a.variables,\n      dataIdFromObject = _a.dataIdFromObject,\n      fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    return this.writeResultToStore({\n      dataId: 'ROOT_QUERY',\n      result: result,\n      document: query,\n      store: store,\n      variables: variables,\n      dataIdFromObject: dataIdFromObject,\n      fragmentMatcherFunction: fragmentMatcherFunction\n    });\n  };\n  StoreWriter.prototype.writeResultToStore = function (_a) {\n    var dataId = _a.dataId,\n      result = _a.result,\n      document = _a.document,\n      _b = _a.store,\n      store = _b === void 0 ? defaultNormalizedCacheFactory() : _b,\n      variables = _a.variables,\n      dataIdFromObject = _a.dataIdFromObject,\n      fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    var operationDefinition = getOperationDefinition(document);\n    try {\n      return this.writeSelectionSetToStore({\n        result: result,\n        dataId: dataId,\n        selectionSet: operationDefinition.selectionSet,\n        context: {\n          store: store,\n          processedData: {},\n          variables: assign({}, getDefaultValues(operationDefinition), variables),\n          dataIdFromObject: dataIdFromObject,\n          fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n          fragmentMatcherFunction: fragmentMatcherFunction\n        }\n      });\n    } catch (e) {\n      throw enhanceErrorWithDocument(e, document);\n    }\n  };\n  StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n    var _this = this;\n    var result = _a.result,\n      dataId = _a.dataId,\n      selectionSet = _a.selectionSet,\n      context = _a.context;\n    var variables = context.variables,\n      store = context.store,\n      fragmentMap = context.fragmentMap;\n    selectionSet.selections.forEach(function (selection) {\n      var _a;\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n      if (isField(selection)) {\n        var resultFieldKey = resultKeyNameFromField(selection);\n        var value = result[resultFieldKey];\n        if (typeof value !== 'undefined') {\n          _this.writeFieldToStore({\n            dataId: dataId,\n            value: value,\n            field: selection,\n            context: context\n          });\n        } else {\n          var isDefered = false;\n          var isClient = false;\n          if (selection.directives && selection.directives.length) {\n            isDefered = selection.directives.some(function (directive) {\n              return directive.name && directive.name.value === 'defer';\n            });\n            isClient = selection.directives.some(function (directive) {\n              return directive.name && directive.name.value === 'client';\n            });\n          }\n          if (!isDefered && !isClient && context.fragmentMatcherFunction) {\n            process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n          }\n        }\n      } else {\n        var fragment = void 0;\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          fragment = (fragmentMap || {})[selection.name.value];\n          process.env.NODE_ENV === \"production\" ? invariant(fragment, 3) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n        }\n        var matches = true;\n        if (context.fragmentMatcherFunction && fragment.typeCondition) {\n          var id = dataId || 'self';\n          var idValue = toIdValue({\n            id: id,\n            typename: undefined\n          });\n          var fakeContext = {\n            store: new ObjectCache((_a = {}, _a[id] = result, _a)),\n            cacheRedirects: {}\n          };\n          var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n          if (!isProduction() && match === 'heuristic') {\n            process.env.NODE_ENV === \"production\" || invariant.error('WARNING: heuristic fragment matching going on!');\n          }\n          matches = !!match;\n        }\n        if (matches) {\n          _this.writeSelectionSetToStore({\n            result: result,\n            selectionSet: fragment.selectionSet,\n            dataId: dataId,\n            context: context\n          });\n        }\n      }\n    });\n    return store;\n  };\n  StoreWriter.prototype.writeFieldToStore = function (_a) {\n    var _b;\n    var field = _a.field,\n      value = _a.value,\n      dataId = _a.dataId,\n      context = _a.context;\n    var variables = context.variables,\n      dataIdFromObject = context.dataIdFromObject,\n      store = context.store;\n    var storeValue;\n    var storeObject;\n    var storeFieldName = storeKeyNameFromField(field, variables);\n    if (!field.selectionSet || value === null) {\n      storeValue = value != null && typeof value === 'object' ? {\n        type: 'json',\n        json: value\n      } : value;\n    } else if (Array.isArray(value)) {\n      var generatedId = dataId + \".\" + storeFieldName;\n      storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);\n    } else {\n      var valueDataId = dataId + \".\" + storeFieldName;\n      var generated = true;\n      if (!isGeneratedId(valueDataId)) {\n        valueDataId = '$' + valueDataId;\n      }\n      if (dataIdFromObject) {\n        var semanticId = dataIdFromObject(value);\n        process.env.NODE_ENV === \"production\" ? invariant(!semanticId || !isGeneratedId(semanticId), 4) : invariant(!semanticId || !isGeneratedId(semanticId), 'IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n        if (semanticId || typeof semanticId === 'number' && semanticId === 0) {\n          valueDataId = semanticId;\n          generated = false;\n        }\n      }\n      if (!isDataProcessed(valueDataId, field, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: valueDataId,\n          result: value,\n          selectionSet: field.selectionSet,\n          context: context\n        });\n      }\n      var typename = value.__typename;\n      storeValue = toIdValue({\n        id: valueDataId,\n        typename: typename\n      }, generated);\n      storeObject = store.get(dataId);\n      var escapedId = storeObject && storeObject[storeFieldName];\n      if (escapedId !== storeValue && isIdValue(escapedId)) {\n        var hadTypename = escapedId.typename !== undefined;\n        var hasTypename = typename !== undefined;\n        var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;\n        process.env.NODE_ENV === \"production\" ? invariant(!generated || escapedId.generated || typenameChanged, 5) : invariant(!generated || escapedId.generated || typenameChanged, \"Store error: the application attempted to write an object with no provided id but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n        process.env.NODE_ENV === \"production\" ? invariant(!hadTypename || hasTypename, 6) : invariant(!hadTypename || hasTypename, \"Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of \" + escapedId.typename + \" for the object of id \" + escapedId.id + \". The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n        if (escapedId.generated) {\n          if (typenameChanged) {\n            if (!generated) {\n              store.delete(escapedId.id);\n            }\n          } else {\n            mergeWithGenerated(escapedId.id, storeValue.id, store);\n          }\n        }\n      }\n    }\n    storeObject = store.get(dataId);\n    if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n      store.set(dataId, __assign(__assign({}, storeObject), (_b = {}, _b[storeFieldName] = storeValue, _b)));\n    }\n  };\n  StoreWriter.prototype.processArrayValue = function (value, generatedId, selectionSet, context) {\n    var _this = this;\n    return value.map(function (item, index) {\n      if (item === null) {\n        return null;\n      }\n      var itemDataId = generatedId + \".\" + index;\n      if (Array.isArray(item)) {\n        return _this.processArrayValue(item, itemDataId, selectionSet, context);\n      }\n      var generated = true;\n      if (context.dataIdFromObject) {\n        var semanticId = context.dataIdFromObject(item);\n        if (semanticId) {\n          itemDataId = semanticId;\n          generated = false;\n        }\n      }\n      if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n        _this.writeSelectionSetToStore({\n          dataId: itemDataId,\n          result: item,\n          selectionSet: selectionSet,\n          context: context\n        });\n      }\n      return toIdValue({\n        id: itemDataId,\n        typename: item.__typename\n      }, generated);\n    });\n  };\n  return StoreWriter;\n}();\nfunction isGeneratedId(id) {\n  return id[0] === '$';\n}\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n  if (generatedKey === realKey) {\n    return false;\n  }\n  var generated = cache.get(generatedKey);\n  var real = cache.get(realKey);\n  var madeChanges = false;\n  Object.keys(generated).forEach(function (key) {\n    var value = generated[key];\n    var realValue = real[key];\n    if (isIdValue(value) && isGeneratedId(value.id) && isIdValue(realValue) && !isEqual(value, realValue) && mergeWithGenerated(value.id, realValue.id, cache)) {\n      madeChanges = true;\n    }\n  });\n  cache.delete(generatedKey);\n  var newRealValue = __assign(__assign({}, generated), real);\n  if (isEqual(newRealValue, real)) {\n    return madeChanges;\n  }\n  cache.set(realKey, newRealValue);\n  return true;\n}\nfunction isDataProcessed(dataId, field, processedData) {\n  if (!processedData) {\n    return false;\n  }\n  if (processedData[dataId]) {\n    if (processedData[dataId].indexOf(field) >= 0) {\n      return true;\n    } else {\n      processedData[dataId].push(field);\n    }\n  } else {\n    processedData[dataId] = [field];\n  }\n  return false;\n}\nvar defaultConfig = {\n  fragmentMatcher: new HeuristicFragmentMatcher(),\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  freezeResults: false\n};\nfunction defaultDataIdFromObject(result) {\n  if (result.__typename) {\n    if (result.id !== undefined) {\n      return result.__typename + \":\" + result.id;\n    }\n    if (result._id !== undefined) {\n      return result.__typename + \":\" + result._id;\n    }\n  }\n  return null;\n}\nvar hasOwn$1 = Object.prototype.hasOwnProperty;\nvar OptimisticCacheLayer = function (_super) {\n  __extends(OptimisticCacheLayer, _super);\n  function OptimisticCacheLayer(optimisticId, parent, transaction) {\n    var _this = _super.call(this, Object.create(null)) || this;\n    _this.optimisticId = optimisticId;\n    _this.parent = parent;\n    _this.transaction = transaction;\n    return _this;\n  }\n  OptimisticCacheLayer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n  OptimisticCacheLayer.prototype.get = function (dataId) {\n    return hasOwn$1.call(this.data, dataId) ? this.data[dataId] : this.parent.get(dataId);\n  };\n  return OptimisticCacheLayer;\n}(ObjectCache);\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this) || this;\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.cacheKeyRoot = new KeyTrie(canUseWeakMap);\n    _this.silenceBroadcast = false;\n    _this.config = __assign(__assign({}, defaultConfig), config);\n    if (_this.config.customResolvers) {\n      process.env.NODE_ENV === \"production\" || invariant.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');\n      _this.config.cacheRedirects = _this.config.customResolvers;\n    }\n    if (_this.config.cacheResolvers) {\n      process.env.NODE_ENV === \"production\" || invariant.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');\n      _this.config.cacheRedirects = _this.config.cacheResolvers;\n    }\n    _this.addTypename = !!_this.config.addTypename;\n    _this.data = _this.config.resultCaching ? new DepTrackingCache() : new ObjectCache();\n    _this.optimisticData = _this.data;\n    _this.storeWriter = new StoreWriter();\n    _this.storeReader = new StoreReader({\n      cacheKeyRoot: _this.cacheKeyRoot,\n      freezeResults: config.freezeResults\n    });\n    var cache = _this;\n    var maybeBroadcastWatch = cache.maybeBroadcastWatch;\n    _this.maybeBroadcastWatch = wrap(function (c) {\n      return maybeBroadcastWatch.call(_this, c);\n    }, {\n      makeCacheKey: function (c) {\n        if (c.optimistic) {\n          return;\n        }\n        if (c.previousResult) {\n          return;\n        }\n        if (cache.data instanceof DepTrackingCache) {\n          return cache.cacheKeyRoot.lookup(c.query, JSON.stringify(c.variables));\n        }\n      }\n    });\n    return _this;\n  }\n  InMemoryCache.prototype.restore = function (data) {\n    if (data) this.data.replace(data);\n    return this;\n  };\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return (optimistic ? this.optimisticData : this.data).toObject();\n  };\n  InMemoryCache.prototype.read = function (options) {\n    if (typeof options.rootId === 'string' && typeof this.data.get(options.rootId) === 'undefined') {\n      return null;\n    }\n    var fragmentMatcher = this.config.fragmentMatcher;\n    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n    return this.storeReader.readQueryFromStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(options.query),\n      variables: options.variables,\n      rootId: options.rootId,\n      fragmentMatcherFunction: fragmentMatcherFunction,\n      previousResult: options.previousResult,\n      config: this.config\n    }) || null;\n  };\n  InMemoryCache.prototype.write = function (write) {\n    var fragmentMatcher = this.config.fragmentMatcher;\n    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n    this.storeWriter.writeResultToStore({\n      dataId: write.dataId,\n      result: write.result,\n      variables: write.variables,\n      document: this.transformDocument(write.query),\n      store: this.data,\n      dataIdFromObject: this.config.dataIdFromObject,\n      fragmentMatcherFunction: fragmentMatcherFunction\n    });\n    this.broadcastWatches();\n  };\n  InMemoryCache.prototype.diff = function (query) {\n    var fragmentMatcher = this.config.fragmentMatcher;\n    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n    return this.storeReader.diffQueryAgainstStore({\n      store: query.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(query.query),\n      variables: query.variables,\n      returnPartialData: query.returnPartialData,\n      previousResult: query.previousResult,\n      fragmentMatcherFunction: fragmentMatcherFunction,\n      config: this.config\n    });\n  };\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n    this.watches.add(watch);\n    return function () {\n      _this.watches.delete(watch);\n    };\n  };\n  InMemoryCache.prototype.evict = function (query) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(7) : new InvariantError(\"eviction is not implemented on InMemory Cache\");\n  };\n  InMemoryCache.prototype.reset = function () {\n    this.data.clear();\n    this.broadcastWatches();\n    return Promise.resolve();\n  };\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var toReapply = [];\n    var removedCount = 0;\n    var layer = this.optimisticData;\n    while (layer instanceof OptimisticCacheLayer) {\n      if (layer.optimisticId === idToRemove) {\n        ++removedCount;\n      } else {\n        toReapply.push(layer);\n      }\n      layer = layer.parent;\n    }\n    if (removedCount > 0) {\n      this.optimisticData = layer;\n      while (toReapply.length > 0) {\n        var layer_1 = toReapply.pop();\n        this.performTransaction(layer_1.transaction, layer_1.optimisticId);\n      }\n      this.broadcastWatches();\n    }\n  };\n  InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n    var _a = this,\n      data = _a.data,\n      silenceBroadcast = _a.silenceBroadcast;\n    this.silenceBroadcast = true;\n    if (typeof optimisticId === 'string') {\n      this.data = this.optimisticData = new OptimisticCacheLayer(optimisticId, this.optimisticData, transaction);\n    }\n    try {\n      transaction(this);\n    } finally {\n      this.silenceBroadcast = silenceBroadcast;\n      this.data = data;\n    }\n    this.broadcastWatches();\n  };\n  InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n    return this.performTransaction(transaction, id);\n  };\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  };\n  InMemoryCache.prototype.broadcastWatches = function () {\n    var _this = this;\n    if (!this.silenceBroadcast) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c);\n      });\n    }\n  };\n  InMemoryCache.prototype.maybeBroadcastWatch = function (c) {\n    c.callback(this.diff({\n      query: c.query,\n      variables: c.variables,\n      previousResult: c.previousResult && c.previousResult(),\n      optimistic: c.optimistic\n    }));\n  };\n  return InMemoryCache;\n}(ApolloCache);\nexport { HeuristicFragmentMatcher, InMemoryCache, IntrospectionFragmentMatcher, ObjectCache, StoreReader, StoreWriter, WriteError, assertIdValue, defaultDataIdFromObject, defaultNormalizedCacheFactory$1 as defaultNormalizedCacheFactory, enhanceErrorWithDocument };","map":{"version":3,"mappings":"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","names":["haveWarned","shouldWarn","answer","isTest","HeuristicFragmentMatcher","Promise","resolve","idValue","typeCondition","context","obj","store","get","id","isRootQuery","__typename","process","options","introspectionQueryResultData","possibleTypesMap","parseIntrospectionResult","isReady","match","bind","IntrospectionFragmentMatcher","implementingTypes","indexOf","introspectionResultData","typeMap","__schema","types","forEach","type","kind","name","possibleTypes","map","hasOwn","Object","prototype","hasOwnProperty","data","create","depend","wrap","dataId","disposable","makeCacheKey","DepTrackingCache","value","oldValue","dirty","call","replace","newData","keys","_this","set","delete","defaultNormalizedCacheFactory","seed","_a","_b","_c","cacheKeyRoot","_d","freezeResults","executeStoreQuery","executeSelectionSet","executeSubSelectedArray","query","rootValue","contextValue","variableValues","fragmentMatcher","lookup","JSON","stringify","selectionSet","execContext","field","array","StoreReader","diffQueryAgainstStore","returnPartialData","result","variables","previousResult","rootId","fragmentMatcherFunction","config","queryDefinition","getQueryDefinition","assign","getDefaultValues","dataIdFromObject","cacheRedirects","execResult","generated","typename","hasMissingFields","missing","length","info","tolerable","fieldName","isEqual","complete","mainDefinition","getMainDefinition","fragments","getFragmentDefinitions","fragmentMap","createFragmentMap","finalResult","objectsToMerge","object","handleMissing","push","selections","shouldInclude","selection","isField","fieldResult","executeField","resultKeyNameFromField","fragment","isInlineFragment","fragmentExecResult","mergeDeepArray","env","NODE_ENV","freeze","args","argumentsObjectFromField","resultKey","directives","getDirectiveInfoFromField","readStoreResult","readStoreResolver","Array","isArray","combineExecResults","assertSelectionSetForIdValue","maybeDeepFreeze","_i","execResults","pop","childResult","item","isIdValue","defaultFragmentMatcher","assertIdValue","storeKeyName","getStoreKeyName","fieldValue","resolver","getCacheKey","storeObj","toIdValue","isJsonValue","json","ObjectCache","__extends","Error","enhanceErrorWithDocument","error","document","enhancedError","WriteError","message","stack","StoreWriter","writeResultToStore","operationDefinition","getOperationDefinition","writeSelectionSetToStore","processedData","e","resultFieldKey","writeFieldToStore","isDefered","isClient","some","directive","matches","undefined","fakeContext","isProduction","storeValue","storeObject","storeFieldName","storeKeyNameFromField","generatedId","processArrayValue","valueDataId","isGeneratedId","semanticId","invariant","isDataProcessed","escapedId","hadTypename","hasTypename","typenameChanged","mergeWithGenerated","index","itemDataId","generatedKey","realKey","cache","real","madeChanges","key","realValue","newRealValue","defaultConfig","defaultDataIdFromObject","addTypename","resultCaching","_id","optimisticId","parent","transaction","_super","OptimisticCacheLayer","toObject","Set","Map","KeyTrie","canUseWeakMap","customResolvers","cacheResolvers","optimisticData","storeWriter","storeReader","maybeBroadcastWatch","c","optimistic","InMemoryCache","readQueryFromStore","transformDocument","write","broadcastWatches","watch","watches","add","InvariantError","clear","idToRemove","toReapply","removedCount","layer","layer_1","performTransaction","silenceBroadcast","typenameDocumentCache","addTypenameToDocument","callback","diff","ApolloCache"],"sources":["C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-cache-inmemory\\src\\fragmentMatcher.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-cache-inmemory\\src\\depTrackingCache.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-cache-inmemory\\src\\readFromStore.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-cache-inmemory\\src\\objectCache.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-cache-inmemory\\src\\writeToStore.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-cache-inmemory\\src\\inMemoryCache.ts"],"sourcesContent":["import { isTest, IdValue } from 'apollo-utilities';\nimport { invariant } from 'ts-invariant';\n\nimport {\n  ReadStoreContext,\n  FragmentMatcherInterface,\n  PossibleTypesMap,\n  IntrospectionResultData,\n} from './types';\n\nlet haveWarned = false;\n\nfunction shouldWarn() {\n  const answer = !haveWarned;\n  /* istanbul ignore if */\n  if (!isTest()) {\n    haveWarned = true;\n  }\n  return answer;\n}\n\n/**\n * This fragment matcher is very basic and unable to match union or interface type conditions\n */\nexport class HeuristicFragmentMatcher implements FragmentMatcherInterface {\n  constructor() {\n    // do nothing\n  }\n\n  public ensureReady() {\n    return Promise.resolve();\n  }\n\n  public canBypassInit() {\n    return true; // we don't need to initialize this fragment matcher.\n  }\n\n  public match(\n    idValue: IdValue,\n    typeCondition: string,\n    context: ReadStoreContext,\n  ): boolean | 'heuristic' {\n    const obj = context.store.get(idValue.id);\n    const isRootQuery = idValue.id === 'ROOT_QUERY';\n\n    if (!obj) {\n      // https://github.com/apollographql/apollo-client/pull/3507\n      return isRootQuery;\n    }\n\n    const { __typename = isRootQuery && 'Query' } = obj;\n\n    if (!__typename) {\n      if (shouldWarn()) {\n        invariant.warn(`You're using fragments in your queries, but either don't have the addTypename:\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\n   can accurately match fragments.`);\n        invariant.warn(\n          'Could not find __typename on Fragment ',\n          typeCondition,\n          obj,\n        );\n        invariant.warn(\n          `DEPRECATION WARNING: using fragments without __typename is unsupported behavior ` +\n            `and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.`,\n        );\n      }\n\n      return 'heuristic';\n    }\n\n    if (__typename === typeCondition) {\n      return true;\n    }\n\n    // At this point we don't know if this fragment should match or not. It's\n    // either:\n    //\n    // 1. (GOOD) A fragment on a matching interface or union.\n    // 2. (BAD) A fragment on a non-matching concrete type or interface or union.\n    //\n    // If it's 2, we don't want it to match. If it's 1, we want it to match. We\n    // can't tell the difference, so we warn the user, but still try to match\n    // it (for backwards compatibility reasons). This unfortunately means that\n    // using the `HeuristicFragmentMatcher` with unions and interfaces is\n    // very unreliable. This will be addressed in a future major version of\n    // Apollo Client, but for now the recommendation is to use the\n    // `IntrospectionFragmentMatcher` when working with unions/interfaces.\n\n    if (shouldWarn()) {\n      invariant.error(\n        'You are using the simple (heuristic) fragment matcher, but your ' +\n          'queries contain union or interface types. Apollo Client will not be ' +\n          'able to accurately map fragments. To make this error go away, use ' +\n          'the `IntrospectionFragmentMatcher` as described in the docs: ' +\n          'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher',\n      );\n    }\n\n    return 'heuristic';\n  }\n}\n\nexport class IntrospectionFragmentMatcher implements FragmentMatcherInterface {\n  private isReady: boolean;\n  private possibleTypesMap: PossibleTypesMap;\n\n  constructor(options?: {\n    introspectionQueryResultData?: IntrospectionResultData;\n  }) {\n    if (options && options.introspectionQueryResultData) {\n      this.possibleTypesMap = this.parseIntrospectionResult(\n        options.introspectionQueryResultData,\n      );\n      this.isReady = true;\n    } else {\n      this.isReady = false;\n    }\n\n    this.match = this.match.bind(this);\n  }\n\n  public match(\n    idValue: IdValue,\n    typeCondition: string,\n    context: ReadStoreContext,\n  ) {\n    invariant(\n      this.isReady,\n      'FragmentMatcher.match() was called before FragmentMatcher.init()',\n    );\n\n    const obj = context.store.get(idValue.id);\n    const isRootQuery = idValue.id === 'ROOT_QUERY';\n\n    if (!obj) {\n      // https://github.com/apollographql/apollo-client/pull/4620\n      return isRootQuery;\n    }\n\n    const { __typename = isRootQuery && 'Query' } = obj;\n\n    invariant(\n      __typename,\n      `Cannot match fragment because __typename property is missing: ${JSON.stringify(\n        obj,\n      )}`,\n    );\n\n    if (__typename === typeCondition) {\n      return true;\n    }\n\n    const implementingTypes = this.possibleTypesMap[typeCondition];\n    if (\n      __typename &&\n      implementingTypes &&\n      implementingTypes.indexOf(__typename) > -1\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private parseIntrospectionResult(\n    introspectionResultData: IntrospectionResultData,\n  ): PossibleTypesMap {\n    const typeMap: PossibleTypesMap = {};\n    introspectionResultData.__schema.types.forEach(type => {\n      if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n        typeMap[type.name] = type.possibleTypes.map(\n          implementingType => implementingType.name,\n        );\n      }\n    });\n    return typeMap;\n  }\n}\n","import { NormalizedCache, NormalizedCacheObject, StoreObject } from './types';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport class DepTrackingCache implements NormalizedCache {\n  // Wrapper function produced by the optimism library, used to depend on\n  // dataId strings, for easy invalidation of specific IDs.\n  private depend: OptimisticWrapperFunction<[string], StoreObject | undefined>;\n\n  constructor(private data: NormalizedCacheObject = Object.create(null)) {\n    this.depend = wrap((dataId: string) => this.data[dataId], {\n      disposable: true,\n      makeCacheKey(dataId: string) {\n        return dataId;\n      },\n    });\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return this.data;\n  }\n\n  public get(dataId: string): StoreObject {\n    this.depend(dataId);\n    return this.data[dataId]!;\n  }\n\n  public set(dataId: string, value?: StoreObject) {\n    const oldValue = this.data[dataId];\n    if (value !== oldValue) {\n      this.data[dataId] = value;\n      this.depend.dirty(dataId);\n    }\n  }\n\n  public delete(dataId: string): void {\n    if (hasOwn.call(this.data, dataId)) {\n      delete this.data[dataId];\n      this.depend.dirty(dataId);\n    }\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    if (newData) {\n      Object.keys(newData).forEach(dataId => {\n        this.set(dataId, newData[dataId]);\n      });\n      Object.keys(this.data).forEach(dataId => {\n        if (!hasOwn.call(newData, dataId)) {\n          this.delete(dataId);\n        }\n      });\n    } else {\n      Object.keys(this.data).forEach(dataId => {\n        this.delete(dataId);\n      });\n    }\n  }\n}\n\nexport function defaultNormalizedCacheFactory(\n  seed?: NormalizedCacheObject,\n): NormalizedCache {\n  return new DepTrackingCache(seed);\n}\n","import {\n  argumentsObjectFromField,\n  assign,\n  canUseWeakMap,\n  createFragmentMap,\n  DirectiveInfo,\n  FragmentMap,\n  getDefaultValues,\n  getDirectiveInfoFromField,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  getStoreKeyName,\n  IdValue,\n  isEqual,\n  isField,\n  isIdValue,\n  isInlineFragment,\n  isJsonValue,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  resultKeyNameFromField,\n  shouldInclude,\n  StoreValue,\n  toIdValue,\n} from 'apollo-utilities';\n\nimport { Cache } from 'apollo-cache';\n\nimport {\n  ReadStoreContext,\n  DiffQueryAgainstStoreOptions,\n  ReadQueryOptions,\n  StoreObject,\n} from './types';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionSetNode,\n} from 'graphql';\n\nimport { wrap, KeyTrie } from 'optimism';\nimport { DepTrackingCache } from './depTrackingCache';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: ReadStoreContext,\n) => boolean | 'heuristic';\n\ntype ExecContext = {\n  query: DocumentNode;\n  fragmentMap: FragmentMap;\n  contextValue: ReadStoreContext;\n  variableValues: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n};\n\ntype ExecInfo = {\n  resultKey: string;\n  directives: DirectiveInfo;\n};\n\nexport type ExecResultMissingField = {\n  object: StoreObject;\n  fieldName: string;\n  tolerable: boolean;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  // Empty array if no missing fields encountered while computing result.\n  missing?: ExecResultMissingField[];\n};\n\ntype ExecStoreQueryOptions = {\n  query: DocumentNode;\n  rootValue: IdValue;\n  contextValue: ReadStoreContext;\n  variableValues: VariableMap;\n  // Default matcher always matches all fragments\n  fragmentMatcher?: FragmentMatcher;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  rootValue: any;\n  execContext: ExecContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: any[];\n  execContext: ExecContext;\n};\n\nexport interface StoreReaderConfig {\n  cacheKeyRoot?: KeyTrie<object>;\n  freezeResults?: boolean;\n}\n\nexport class StoreReader {\n  private freezeResults: boolean;\n\n  constructor({\n    cacheKeyRoot = new KeyTrie<object>(canUseWeakMap),\n    freezeResults = false,\n  }: StoreReaderConfig = {}) {\n    const {\n      executeStoreQuery,\n      executeSelectionSet,\n      executeSubSelectedArray,\n    } = this;\n\n    this.freezeResults = freezeResults;\n\n    this.executeStoreQuery = wrap((options: ExecStoreQueryOptions) => {\n      return executeStoreQuery.call(this, options);\n    }, {\n      makeCacheKey({\n        query,\n        rootValue,\n        contextValue,\n        variableValues,\n        fragmentMatcher,\n      }: ExecStoreQueryOptions) {\n        // The result of executeStoreQuery can be safely cached only if the\n        // underlying store is capable of tracking dependencies and invalidating\n        // the cache when relevant data have changed.\n        if (contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(\n            contextValue.store,\n            query,\n            fragmentMatcher,\n            JSON.stringify(variableValues),\n            rootValue.id,\n          );\n        }\n      }\n    });\n\n    this.executeSelectionSet = wrap((options: ExecSelectionSetOptions) => {\n      return executeSelectionSet.call(this, options);\n    }, {\n      makeCacheKey({\n        selectionSet,\n        rootValue,\n        execContext,\n      }: ExecSelectionSetOptions) {\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(\n            execContext.contextValue.store,\n            selectionSet,\n            execContext.fragmentMatcher,\n            JSON.stringify(execContext.variableValues),\n            rootValue.id,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      return executeSubSelectedArray.call(this, options);\n    }, {\n      makeCacheKey({ field, array, execContext }) {\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(\n            execContext.contextValue.store,\n            field,\n            array,\n            JSON.stringify(execContext.variableValues),\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Resolves the result of a query solely from the store (i.e. never hits the server).\n   *\n   * @param {Store} store The {@link NormalizedCache} used by Apollo for the `data` portion of the\n   * store.\n   *\n   * @param {DocumentNode} query The query document to resolve from the data available in the store.\n   *\n   * @param {Object} [variables] A map from the name of a variable to its value. These variables can\n   * be referenced by the query document.\n   *\n   * @param {any} previousResult The previous result returned by this function for the same query.\n   * If nothing in the store changed since that previous result then values from the previous result\n   * will be returned to preserve referential equality.\n   */\n  public readQueryFromStore<QueryType>(\n    options: ReadQueryOptions,\n  ): QueryType | undefined {\n    return this.diffQueryAgainstStore<QueryType>({\n      ...options,\n      returnPartialData: false,\n    }).result;\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @param  {any} previousResult The previous result returned by this function for the same query\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    variables,\n    previousResult,\n    returnPartialData = true,\n    rootId = 'ROOT_QUERY',\n    fragmentMatcherFunction,\n    config,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    // Throw the right validation error by trying to find a query in the document\n    const queryDefinition = getQueryDefinition(query);\n\n    variables = assign({}, getDefaultValues(queryDefinition), variables);\n\n    const context: ReadStoreContext = {\n      // Global settings\n      store,\n      dataIdFromObject: config && config.dataIdFromObject,\n      cacheRedirects: (config && config.cacheRedirects) || {},\n    };\n\n    const execResult = this.executeStoreQuery({\n      query,\n      rootValue: {\n        type: 'id',\n        id: rootId,\n        generated: true,\n        typename: 'Query',\n      },\n      contextValue: context,\n      variableValues: variables,\n      fragmentMatcher: fragmentMatcherFunction,\n    });\n\n    const hasMissingFields =\n      execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && ! returnPartialData) {\n      execResult.missing!.forEach(info => {\n        if (info.tolerable) return;\n        throw new InvariantError(\n          `Can't find field ${info.fieldName} on object ${JSON.stringify(\n            info.object,\n            null,\n            2,\n          )}.`,\n        );\n      });\n    }\n\n    if (previousResult) {\n      if (isEqual(previousResult, execResult.result)) {\n        execResult.result = previousResult;\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !hasMissingFields,\n    };\n  }\n\n  /**\n   * Based on graphql function from graphql-js:\n   *\n   * graphql(\n   *   schema: GraphQLSchema,\n   *   requestString: string,\n   *   rootValue?: ?any,\n   *   contextValue?: ?any,\n   *   variableValues?: ?{[key: string]: any},\n   *   operationName?: ?string\n   * ): Promise<GraphQLResult>\n   *\n   * The default export as of graphql-anywhere is sync as of 4.0,\n   * but below is an exported alternative that is async.\n   * In the 5.0 version, this will be the only export again\n   * and it will be async\n   *\n   */\n  private executeStoreQuery({\n    query,\n    rootValue,\n    contextValue,\n    variableValues,\n    // Default matcher always matches all fragments\n    fragmentMatcher = defaultFragmentMatcher,\n  }: ExecStoreQueryOptions): ExecResult {\n    const mainDefinition = getMainDefinition(query);\n    const fragments = getFragmentDefinitions(query);\n    const fragmentMap = createFragmentMap(fragments);\n    const execContext: ExecContext = {\n      query,\n      fragmentMap,\n      contextValue,\n      variableValues,\n      fragmentMatcher,\n    };\n\n    return this.executeSelectionSet({\n      selectionSet: mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    });\n  }\n\n  private executeSelectionSet({\n    selectionSet,\n    rootValue,\n    execContext,\n  }: ExecSelectionSetOptions): ExecResult {\n    const { fragmentMap, contextValue, variableValues: variables } = execContext;\n    const finalResult: ExecResult = { result: null };\n\n    const objectsToMerge: { [key: string]: any }[] = [];\n\n    const object: StoreObject = contextValue.store.get(rootValue.id);\n\n    const typename =\n      (object && object.__typename) ||\n      (rootValue.id === 'ROOT_QUERY' && 'Query') ||\n      void 0;\n\n    function handleMissing<T>(result: ExecResult<T>): T {\n      if (result.missing) {\n        finalResult.missing = finalResult.missing || [];\n        finalResult.missing.push(...result.missing);\n      }\n      return result.result;\n    }\n\n    selectionSet.selections.forEach(selection => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely\n        return;\n      }\n\n      if (isField(selection)) {\n        const fieldResult = handleMissing(\n          this.executeField(object, typename, selection, execContext),\n        );\n\n        if (typeof fieldResult !== 'undefined') {\n          objectsToMerge.push({\n            [resultKeyNameFromField(selection)]: fieldResult,\n          });\n        }\n\n      } else {\n        let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          // This is a named fragment\n          fragment = fragmentMap[selection.name.value];\n\n          if (!fragment) {\n            throw new InvariantError(`No fragment named ${selection.name.value}`);\n          }\n        }\n\n        const typeCondition =\n          fragment.typeCondition && fragment.typeCondition.name.value;\n\n        const match =\n          !typeCondition ||\n          execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n\n        if (match) {\n          let fragmentExecResult = this.executeSelectionSet({\n            selectionSet: fragment.selectionSet,\n            rootValue,\n            execContext,\n          });\n\n          if (match === 'heuristic' && fragmentExecResult.missing) {\n            fragmentExecResult = {\n              ...fragmentExecResult,\n              missing: fragmentExecResult.missing.map(info => {\n                return { ...info, tolerable: true };\n              }),\n            };\n          }\n\n          objectsToMerge.push(handleMissing(fragmentExecResult));\n        }\n      }\n    });\n\n    // Perform a single merge at the end so that we can avoid making more\n    // defensive shallow copies than necessary.\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    return finalResult;\n  }\n\n  private executeField(\n    object: StoreObject,\n    typename: string | void,\n    field: FieldNode,\n    execContext: ExecContext,\n  ): ExecResult {\n    const { variableValues: variables, contextValue } = execContext;\n    const fieldName = field.name.value;\n    const args = argumentsObjectFromField(field, variables);\n\n    const info: ExecInfo = {\n      resultKey: resultKeyNameFromField(field),\n      directives: getDirectiveInfoFromField(field, variables),\n    };\n\n    const readStoreResult = readStoreResolver(\n      object,\n      typename,\n      fieldName,\n      args,\n      contextValue,\n      info,\n    );\n\n    if (Array.isArray(readStoreResult.result)) {\n      return this.combineExecResults(\n        readStoreResult,\n        this.executeSubSelectedArray({\n          field,\n          array: readStoreResult.result,\n          execContext,\n        }),\n      );\n    }\n\n    // Handle all scalar types here\n    if (!field.selectionSet) {\n      assertSelectionSetForIdValue(field, readStoreResult.result);\n      if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n        maybeDeepFreeze(readStoreResult);\n      }\n      return readStoreResult;\n    }\n\n    // From here down, the field has a selection set, which means it's trying to\n    // query a GraphQLObjectType\n    if (readStoreResult.result == null) {\n      // Basically any field in a GraphQL response can be null, or missing\n      return readStoreResult;\n    }\n\n    // Returned value is an object, and the query has a sub-selection. Recurse.\n    return this.combineExecResults(\n      readStoreResult,\n      this.executeSelectionSet({\n        selectionSet: field.selectionSet,\n        rootValue: readStoreResult.result,\n        execContext,\n      }),\n    );\n  }\n\n  private combineExecResults<T>(\n    ...execResults: ExecResult<T>[]\n  ): ExecResult<T> {\n    let missing: ExecResultMissingField[] | undefined;\n    execResults.forEach(execResult => {\n      if (execResult.missing) {\n        missing = missing || [];\n        missing.push(...execResult.missing);\n      }\n    });\n    return {\n      result: execResults.pop()!.result,\n      missing,\n    };\n  }\n\n  private executeSubSelectedArray({\n    field,\n    array,\n    execContext,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: ExecResultMissingField[] | undefined;\n\n    function handleMissing<T>(childResult: ExecResult<T>): T {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push(...childResult.missing);\n      }\n\n      return childResult.result;\n    }\n\n    array = array.map(item => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          execContext,\n        }));\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          rootValue: item,\n          execContext,\n        }));\n      }\n\n      assertSelectionSetForIdValue(field, item);\n\n      return item;\n    });\n\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return { result: array, missing };\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  field: FieldNode,\n  value: any,\n) {\n  if (!field.selectionSet && isIdValue(value)) {\n    throw new InvariantError(\n      `Missing selection set for object of type ${\n        value.typename\n      } returned for query field ${field.name.value}`\n    );\n  }\n}\n\nfunction defaultFragmentMatcher() {\n  return true;\n}\n\nexport function assertIdValue(idValue: IdValue) {\n  invariant(isIdValue(idValue), `\\\nEncountered a sub-selection on the query, but the store doesn't have \\\nan object reference. This should never happen during normal use unless you have custom code \\\nthat is directly manipulating the store; please file an issue.`);\n}\n\nfunction readStoreResolver(\n  object: StoreObject,\n  typename: string | void,\n  fieldName: string,\n  args: any,\n  context: ReadStoreContext,\n  { resultKey, directives }: ExecInfo,\n): ExecResult<StoreValue> {\n  let storeKeyName = fieldName;\n  if (args || directives) {\n    // We happen to know here that getStoreKeyName returns its first\n    // argument unmodified if there are no args or directives, so we can\n    // avoid calling the function at all in that case, as a small but\n    // important optimization to this frequently executed code.\n    storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n  }\n\n  let fieldValue: StoreValue | void = void 0;\n\n  if (object) {\n    fieldValue = object[storeKeyName];\n\n    if (\n      typeof fieldValue === 'undefined' &&\n      context.cacheRedirects &&\n      typeof typename === 'string'\n    ) {\n      // Look for the type in the custom resolver map\n      const type = context.cacheRedirects[typename];\n      if (type) {\n        // Look for the field in the custom resolver map\n        const resolver = type[fieldName];\n        if (resolver) {\n          fieldValue = resolver(object, args, {\n            getCacheKey(storeObj: StoreObject) {\n              const id = context.dataIdFromObject!(storeObj);\n              return id && toIdValue({\n                id,\n                typename: storeObj.__typename,\n              });\n            },\n          });\n        }\n      }\n    }\n  }\n\n  if (typeof fieldValue === 'undefined') {\n    return {\n      result: fieldValue,\n      missing: [{\n        object,\n        fieldName: storeKeyName,\n        tolerable: false,\n      }],\n    };\n  }\n\n  if (isJsonValue(fieldValue)) {\n    fieldValue = fieldValue.json;\n  }\n\n  return {\n    result: fieldValue,\n  };\n}\n","import { NormalizedCache, NormalizedCacheObject, StoreObject } from './types';\n\nexport class ObjectCache implements NormalizedCache {\n  constructor(protected data: NormalizedCacheObject = Object.create(null)) {}\n\n  public toObject() {\n    return this.data;\n  }\n\n  public get(dataId: string) {\n    return this.data[dataId]!;\n  }\n\n  public set(dataId: string, value: StoreObject) {\n    this.data[dataId] = value;\n  }\n\n  public delete(dataId: string) {\n    this.data[dataId] = void 0;\n  }\n\n  public clear() {\n    this.data = Object.create(null);\n  }\n\n  public replace(newData: NormalizedCacheObject) {\n    this.data = newData || Object.create(null);\n  }\n}\n\nexport function defaultNormalizedCacheFactory(\n  seed?: NormalizedCacheObject,\n): NormalizedCache {\n  return new ObjectCache(seed);\n}\n","import {\n  SelectionSetNode,\n  FieldNode,\n  DocumentNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from 'graphql';\nimport { FragmentMatcher } from './readFromStore';\n\nimport {\n  assign,\n  createFragmentMap,\n  FragmentMap,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  IdValue,\n  isField,\n  isIdValue,\n  isInlineFragment,\n  isProduction,\n  resultKeyNameFromField,\n  shouldInclude,\n  storeKeyNameFromField,\n  StoreValue,\n  toIdValue,\n  isEqual,\n} from 'apollo-utilities';\n\nimport { invariant } from 'ts-invariant';\n\nimport { ObjectCache } from './objectCache';\nimport { defaultNormalizedCacheFactory } from './depTrackingCache';\n\nimport {\n  IdGetter,\n  NormalizedCache,\n  ReadStoreContext,\n  StoreObject,\n} from './types';\n\nexport class WriteError extends Error {\n  public type = 'WriteError';\n}\n\nexport function enhanceErrorWithDocument(error: Error, document: DocumentNode) {\n  // XXX A bit hacky maybe ...\n  const enhancedError = new WriteError(\n    `Error writing result to store for query:\\n ${JSON.stringify(document)}`,\n  );\n  enhancedError.message += '\\n' + error.message;\n  enhancedError.stack = error.stack;\n  return enhancedError;\n}\n\nexport type WriteContext = {\n  readonly store: NormalizedCache;\n  readonly processedData?: { [x: string]: FieldNode[] };\n  readonly variables?: any;\n  readonly dataIdFromObject?: IdGetter;\n  readonly fragmentMap?: FragmentMap;\n  readonly fragmentMatcherFunction?: FragmentMatcher;\n};\n\nexport class StoreWriter {\n  /**\n   * Writes the result of a query to the store.\n   *\n   * @param result The result object returned for the query document.\n   *\n   * @param query The query document whose result we are writing to the store.\n   *\n   * @param store The {@link NormalizedCache} used by Apollo for the `data` portion of the store.\n   *\n   * @param variables A map from the name of a variable to its value. These variables can be\n   * referenced by the query document.\n   *\n   * @param dataIdFromObject A function that returns an object identifier given a particular result\n   * object. See the store documentation for details and an example of this function.\n   *\n   * @param fragmentMatcherFunction A function to use for matching fragment conditions in GraphQL documents\n   */\n  public writeQueryToStore({\n    query,\n    result,\n    store = defaultNormalizedCacheFactory(),\n    variables,\n    dataIdFromObject,\n    fragmentMatcherFunction,\n  }: {\n    query: DocumentNode;\n    result: Object;\n    store?: NormalizedCache;\n    variables?: Object;\n    dataIdFromObject?: IdGetter;\n    fragmentMatcherFunction?: FragmentMatcher;\n  }): NormalizedCache {\n    return this.writeResultToStore({\n      dataId: 'ROOT_QUERY',\n      result,\n      document: query,\n      store,\n      variables,\n      dataIdFromObject,\n      fragmentMatcherFunction,\n    });\n  }\n\n  public writeResultToStore({\n    dataId,\n    result,\n    document,\n    store = defaultNormalizedCacheFactory(),\n    variables,\n    dataIdFromObject,\n    fragmentMatcherFunction,\n  }: {\n    dataId: string;\n    result: any;\n    document: DocumentNode;\n    store?: NormalizedCache;\n    variables?: Object;\n    dataIdFromObject?: IdGetter;\n    fragmentMatcherFunction?: FragmentMatcher;\n  }): NormalizedCache {\n    // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.\n    const operationDefinition = getOperationDefinition(document)!;\n\n    try {\n      return this.writeSelectionSetToStore({\n        result,\n        dataId,\n        selectionSet: operationDefinition.selectionSet,\n        context: {\n          store,\n          processedData: {},\n          variables: assign(\n            {},\n            getDefaultValues(operationDefinition),\n            variables,\n          ),\n          dataIdFromObject,\n          fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n          fragmentMatcherFunction,\n        },\n      });\n    } catch (e) {\n      throw enhanceErrorWithDocument(e, document);\n    }\n  }\n\n  public writeSelectionSetToStore({\n    result,\n    dataId,\n    selectionSet,\n    context,\n  }: {\n    dataId: string;\n    result: any;\n    selectionSet: SelectionSetNode;\n    context: WriteContext;\n  }): NormalizedCache {\n    const { variables, store, fragmentMap } = context;\n\n    selectionSet.selections.forEach(selection => {\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n\n      if (isField(selection)) {\n        const resultFieldKey: string = resultKeyNameFromField(selection);\n        const value: any = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          this.writeFieldToStore({\n            dataId,\n            value,\n            field: selection,\n            context,\n          });\n        } else {\n          let isDefered = false;\n          let isClient = false;\n          if (selection.directives && selection.directives.length) {\n            // If this is a defered field we don't need to throw / warn.\n            isDefered = selection.directives.some(\n              directive => directive.name && directive.name.value === 'defer',\n            );\n\n            // When using the @client directive, it might be desirable in\n            // some cases to want to write a selection set to the store,\n            // without having all of the selection set values available.\n            // This is because the @client field values might have already\n            // been written to the cache separately (e.g. via Apollo\n            // Cache's `writeData` capabilities). Because of this, we'll\n            // skip the missing field warning for fields with @client\n            // directives.\n            isClient = selection.directives.some(\n              directive => directive.name && directive.name.value === 'client',\n            );\n          }\n\n          if (!isDefered && !isClient && context.fragmentMatcherFunction) {\n            // XXX We'd like to throw an error, but for backwards compatibility's sake\n            // we just print a warning for the time being.\n            //throw new WriteError(`Missing field ${resultFieldKey} in ${JSON.stringify(result, null, 2).substring(0, 100)}`);\n            invariant.warn(\n              `Missing field ${resultFieldKey} in ${JSON.stringify(\n                result,\n                null,\n                2,\n              ).substring(0, 100)}`,\n            );\n          }\n        }\n      } else {\n        // This is not a field, so it must be a fragment, either inline or named\n        let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          // Named fragment\n          fragment = (fragmentMap || {})[selection.name.value];\n          invariant(fragment, `No fragment named ${selection.name.value}.`);\n        }\n\n        let matches = true;\n        if (context.fragmentMatcherFunction && fragment.typeCondition) {\n          // TODO we need to rewrite the fragment matchers for this to work properly and efficiently\n          // Right now we have to pretend that we're passing in an idValue and that there's a store\n          // on the context.\n          const id = dataId || 'self';\n          const idValue = toIdValue({ id, typename: undefined });\n          const fakeContext: ReadStoreContext = {\n            // NOTE: fakeContext always uses ObjectCache\n            // since this is only to ensure the return value of 'matches'\n            store: new ObjectCache({ [id]: result }),\n            cacheRedirects: {},\n          };\n          const match = context.fragmentMatcherFunction(\n            idValue,\n            fragment.typeCondition.name.value,\n            fakeContext,\n          );\n          if (!isProduction() && match === 'heuristic') {\n            invariant.error('WARNING: heuristic fragment matching going on!');\n          }\n          matches = !!match;\n        }\n\n        if (matches) {\n          this.writeSelectionSetToStore({\n            result,\n            selectionSet: fragment.selectionSet,\n            dataId,\n            context,\n          });\n        }\n      }\n    });\n\n    return store;\n  }\n\n  private writeFieldToStore({\n    field,\n    value,\n    dataId,\n    context,\n  }: {\n    field: FieldNode;\n    value: any;\n    dataId: string;\n    context: WriteContext;\n  }) {\n    const { variables, dataIdFromObject, store } = context;\n\n    let storeValue: StoreValue;\n    let storeObject: StoreObject;\n\n    const storeFieldName: string = storeKeyNameFromField(field, variables);\n\n    // If this is a scalar value...\n    if (!field.selectionSet || value === null) {\n      storeValue =\n        value != null && typeof value === 'object'\n          ? // If the scalar value is a JSON blob, we have to \"escape\" it so it can’t pretend to be\n            // an id.\n            { type: 'json', json: value }\n          : // Otherwise, just store the scalar directly in the store.\n            value;\n    } else if (Array.isArray(value)) {\n      const generatedId = `${dataId}.${storeFieldName}`;\n\n      storeValue = this.processArrayValue(\n        value,\n        generatedId,\n        field.selectionSet,\n        context,\n      );\n    } else {\n      // It's an object\n      let valueDataId = `${dataId}.${storeFieldName}`;\n      let generated = true;\n\n      // We only prepend the '$' if the valueDataId isn't already a generated\n      // id.\n      if (!isGeneratedId(valueDataId)) {\n        valueDataId = '$' + valueDataId;\n      }\n\n      if (dataIdFromObject) {\n        const semanticId = dataIdFromObject(value);\n\n        // We throw an error if the first character of the id is '$. This is\n        // because we use that character to designate an Apollo-generated id\n        // and we use the distinction between user-desiginated and application-provided\n        // ids when managing overwrites.\n        invariant(\n          !semanticId || !isGeneratedId(semanticId),\n          'IDs returned by dataIdFromObject cannot begin with the \"$\" character.',\n        );\n\n        if (\n          semanticId ||\n          (typeof semanticId === 'number' && semanticId === 0)\n        ) {\n          valueDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(valueDataId, field, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: valueDataId,\n          result: value,\n          selectionSet: field.selectionSet,\n          context,\n        });\n      }\n\n      // We take the id and escape it (i.e. wrap it with an enclosing object).\n      // This allows us to distinguish IDs from normal scalars.\n      const typename = value.__typename;\n      storeValue = toIdValue({ id: valueDataId, typename }, generated);\n\n      // check if there was a generated id at the location where we're\n      // about to place this new id. If there was, we have to merge the\n      // data from that id with the data we're about to write in the store.\n      storeObject = store.get(dataId);\n      const escapedId =\n        storeObject && (storeObject[storeFieldName] as IdValue | undefined);\n      if (escapedId !== storeValue && isIdValue(escapedId)) {\n        const hadTypename = escapedId.typename !== undefined;\n        const hasTypename = typename !== undefined;\n        const typenameChanged =\n          hadTypename && hasTypename && escapedId.typename !== typename;\n\n        // If there is already a real id in the store and the current id we\n        // are dealing with is generated, we throw an error.\n        // One exception we allow is when the typename has changed, which occurs\n        // when schema defines a union, both with and without an ID in the same place.\n        // checks if we \"lost\" the read id\n        invariant(\n          !generated || escapedId.generated || typenameChanged,\n          `Store error: the application attempted to write an object with no provided id but the store already contains an id of ${\n            escapedId.id\n          } for this object. The selectionSet that was trying to be written is:\\n${\n            JSON.stringify(field)\n          }`,\n        );\n\n        // checks if we \"lost\" the typename\n        invariant(\n          !hadTypename || hasTypename,\n          `Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of ${\n            escapedId.typename\n          } for the object of id ${escapedId.id}. The selectionSet that was trying to be written is:\\n${\n            JSON.stringify(field)\n          }`,\n        );\n\n        if (escapedId.generated) {\n          // We should only merge if it's an object of the same type,\n          // otherwise we should delete the generated object\n          if (typenameChanged) {\n            // Only delete the generated object when the old object was\n            // inlined, and the new object is not. This is indicated by\n            // the old id being generated, and the new id being real.\n            if (!generated) {\n              store.delete(escapedId.id);\n            }\n          } else {\n            mergeWithGenerated(escapedId.id, (storeValue as IdValue).id, store);\n          }\n        }\n      }\n    }\n\n    storeObject = store.get(dataId);\n    if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n      store.set(dataId, {\n        ...storeObject,\n        [storeFieldName]: storeValue,\n      });\n    }\n  }\n\n  private processArrayValue(\n    value: any[],\n    generatedId: string,\n    selectionSet: SelectionSetNode,\n    context: WriteContext,\n  ): any[] {\n    return value.map((item: any, index: any) => {\n      if (item === null) {\n        return null;\n      }\n\n      let itemDataId = `${generatedId}.${index}`;\n\n      if (Array.isArray(item)) {\n        return this.processArrayValue(item, itemDataId, selectionSet, context);\n      }\n\n      let generated = true;\n\n      if (context.dataIdFromObject) {\n        const semanticId = context.dataIdFromObject(item);\n\n        if (semanticId) {\n          itemDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: itemDataId,\n          result: item,\n          selectionSet,\n          context,\n        });\n      }\n\n      return toIdValue(\n        { id: itemDataId, typename: item.__typename },\n        generated,\n      );\n    });\n  }\n}\n\n// Checks if the id given is an id that was generated by Apollo\n// rather than by dataIdFromObject.\nfunction isGeneratedId(id: string): boolean {\n  return id[0] === '$';\n}\n\nfunction mergeWithGenerated(\n  generatedKey: string,\n  realKey: string,\n  cache: NormalizedCache,\n): boolean {\n  if (generatedKey === realKey) {\n    return false;\n  }\n\n  const generated = cache.get(generatedKey);\n  const real = cache.get(realKey);\n  let madeChanges = false;\n\n  Object.keys(generated).forEach(key => {\n    const value = generated[key];\n    const realValue = real[key];\n\n    if (\n      isIdValue(value) &&\n      isGeneratedId(value.id) &&\n      isIdValue(realValue) &&\n      !isEqual(value, realValue) &&\n      mergeWithGenerated(value.id, realValue.id, cache)\n    ) {\n      madeChanges = true;\n    }\n  });\n\n  cache.delete(generatedKey);\n  const newRealValue = { ...generated, ...real };\n\n  if (isEqual(newRealValue, real)) {\n    return madeChanges;\n  }\n\n  cache.set(realKey, newRealValue);\n  return true;\n}\n\nfunction isDataProcessed(\n  dataId: string,\n  field: FieldNode | SelectionSetNode,\n  processedData?: { [x: string]: (FieldNode | SelectionSetNode)[] },\n): boolean {\n  if (!processedData) {\n    return false;\n  }\n\n  if (processedData[dataId]) {\n    if (processedData[dataId].indexOf(field) >= 0) {\n      return true;\n    } else {\n      processedData[dataId].push(field);\n    }\n  } else {\n    processedData[dataId] = [field];\n  }\n\n  return false;\n}\n","// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\n\nimport { Cache, ApolloCache, Transaction } from 'apollo-cache';\n\nimport { addTypenameToDocument, canUseWeakMap } from 'apollo-utilities';\n\nimport { wrap } from 'optimism';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { HeuristicFragmentMatcher } from './fragmentMatcher';\nimport {\n  ApolloReducerConfig,\n  NormalizedCache,\n  NormalizedCacheObject,\n} from './types';\n\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { DepTrackingCache } from './depTrackingCache';\nimport { KeyTrie } from 'optimism';\nimport { ObjectCache } from './objectCache';\n\nexport interface InMemoryCacheConfig extends ApolloReducerConfig {\n  resultCaching?: boolean;\n  freezeResults?: boolean;\n}\n\nconst defaultConfig: InMemoryCacheConfig = {\n  fragmentMatcher: new HeuristicFragmentMatcher(),\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  freezeResults: false,\n};\n\nexport function defaultDataIdFromObject(result: any): string | null {\n  if (result.__typename) {\n    if (result.id !== undefined) {\n      return `${result.__typename}:${result.id}`;\n    }\n    if (result._id !== undefined) {\n      return `${result.__typename}:${result._id}`;\n    }\n  }\n  return null;\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport class OptimisticCacheLayer extends ObjectCache {\n  constructor(\n    public readonly optimisticId: string,\n    // OptimisticCacheLayer objects always wrap some other parent cache, so\n    // this.parent should never be null.\n    public readonly parent: NormalizedCache,\n    public readonly transaction: Transaction<NormalizedCacheObject>,\n  ) {\n    super(Object.create(null));\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  // All the other accessor methods of ObjectCache work without knowing about\n  // this.parent, but the get method needs to be overridden to implement the\n  // fallback this.parent.get(dataId) behavior.\n  public get(dataId: string) {\n    return hasOwn.call(this.data, dataId)\n      ? this.data[dataId]\n      : this.parent.get(dataId);\n  }\n}\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: NormalizedCache;\n  private optimisticData: NormalizedCache;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n  private cacheKeyRoot = new KeyTrie<object>(canUseWeakMap);\n\n  // Set this while in a transaction to prevent broadcasts...\n  // don't forget to turn it back on!\n  private silenceBroadcast: boolean = false;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = { ...defaultConfig, ...config };\n\n    // backwards compat\n    if ((this.config as any).customResolvers) {\n      invariant.warn(\n        'customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.',\n      );\n      this.config.cacheRedirects = (this.config as any).customResolvers;\n    }\n\n    if ((this.config as any).cacheResolvers) {\n      invariant.warn(\n        'cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.',\n      );\n      this.config.cacheRedirects = (this.config as any).cacheResolvers;\n    }\n\n    this.addTypename = !!this.config.addTypename;\n\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    this.data = this.config.resultCaching\n      ? new DepTrackingCache()\n      : new ObjectCache();\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of OptimisticCacheLayer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = this.data;\n\n    this.storeWriter = new StoreWriter();\n    this.storeReader = new StoreReader({\n      cacheKeyRoot: this.cacheKeyRoot,\n      freezeResults: config.freezeResults,\n    });\n\n    const cache = this;\n    const { maybeBroadcastWatch } = cache;\n    this.maybeBroadcastWatch = wrap((c: Cache.WatchOptions) => {\n      return maybeBroadcastWatch.call(this, c);\n    }, {\n      makeCacheKey(c: Cache.WatchOptions) {\n        if (c.optimistic) {\n          // If we're reading optimistic data, it doesn't matter if this.data\n          // is a DepTrackingCache, since it will be ignored.\n          return;\n        }\n\n        if (c.previousResult) {\n          // If a previousResult was provided, assume the caller would prefer\n          // to compare the previous data to the new data to determine whether\n          // to broadcast, so we should disable caching by returning here, to\n          // give maybeBroadcastWatch a chance to do that comparison.\n          return;\n        }\n\n        if (cache.data instanceof DepTrackingCache) {\n          // Return a cache key (thus enabling caching) only if we're currently\n          // using a data store that can track cache dependencies.\n          return cache.cacheKeyRoot.lookup(\n            c.query,\n            JSON.stringify(c.variables),\n          );\n        }\n      }\n    });\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).toObject();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    if (typeof options.rootId === 'string' &&\n        typeof this.data.get(options.rootId) === 'undefined') {\n      return null;\n    }\n\n    const { fragmentMatcher } = this.config;\n    const fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n\n    return this.storeReader.readQueryFromStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(options.query),\n      variables: options.variables,\n      rootId: options.rootId,\n      fragmentMatcherFunction,\n      previousResult: options.previousResult,\n      config: this.config,\n    }) || null;\n  }\n\n  public write(write: Cache.WriteOptions): void {\n    const { fragmentMatcher } = this.config;\n    const fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n\n    this.storeWriter.writeResultToStore({\n      dataId: write.dataId,\n      result: write.result,\n      variables: write.variables,\n      document: this.transformDocument(write.query),\n      store: this.data,\n      dataIdFromObject: this.config.dataIdFromObject,\n      fragmentMatcherFunction,\n    });\n\n    this.broadcastWatches();\n  }\n\n  public diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T> {\n    const { fragmentMatcher } = this.config;\n    const fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n\n    return this.storeReader.diffQueryAgainstStore({\n      store: query.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(query.query),\n      variables: query.variables,\n      returnPartialData: query.returnPartialData,\n      previousResult: query.previousResult,\n      fragmentMatcherFunction,\n      config: this.config,\n    });\n  }\n\n  public watch(watch: Cache.WatchOptions): () => void {\n    this.watches.add(watch);\n\n    return () => {\n      this.watches.delete(watch);\n    };\n  }\n\n  public evict(query: Cache.EvictOptions): Cache.EvictionResult {\n    throw new InvariantError(`eviction is not implemented on InMemory Cache`);\n  }\n\n  public reset(): Promise<void> {\n    this.data.clear();\n    this.broadcastWatches();\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const toReapply: OptimisticCacheLayer[] = [];\n    let removedCount = 0;\n    let layer = this.optimisticData;\n\n    while (layer instanceof OptimisticCacheLayer) {\n      if (layer.optimisticId === idToRemove) {\n        ++removedCount;\n      } else {\n        toReapply.push(layer);\n      }\n      layer = layer.parent;\n    }\n\n    if (removedCount > 0) {\n      // Reset this.optimisticData to the first non-OptimisticCacheLayer object,\n      // which is almost certainly this.data.\n      this.optimisticData = layer;\n\n      // Reapply the layers whose optimistic IDs do not match the removed ID.\n      while (toReapply.length > 0) {\n        const layer = toReapply.pop()!;\n        this.performTransaction(layer.transaction, layer.optimisticId);\n      }\n\n      this.broadcastWatches();\n    }\n  }\n\n  public performTransaction(\n    transaction: Transaction<NormalizedCacheObject>,\n    // This parameter is not part of the performTransaction signature inherited\n    // from the ApolloCache abstract class, but it's useful because it saves us\n    // from duplicating this implementation in recordOptimisticTransaction.\n    optimisticId?: string,\n  ) {\n    const { data, silenceBroadcast } = this;\n    this.silenceBroadcast = true;\n\n    if (typeof optimisticId === 'string') {\n      // Add a new optimistic layer and temporarily make this.data refer to\n      // that layer for the duration of the transaction.\n      this.data = this.optimisticData = new OptimisticCacheLayer(\n        // Note that there can be multiple layers with the same optimisticId.\n        // When removeOptimistic(id) is called for that id, all matching layers\n        // will be removed, and the remaining layers will be reapplied.\n        optimisticId,\n        this.optimisticData,\n        transaction,\n      );\n    }\n\n    try {\n      transaction(this);\n    } finally {\n      this.silenceBroadcast = silenceBroadcast;\n      this.data = data;\n    }\n\n    // This broadcast does nothing if this.silenceBroadcast is true.\n    this.broadcastWatches();\n  }\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<NormalizedCacheObject>,\n    id: string,\n  ) {\n    return this.performTransaction(transaction, id);\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches() {\n    if (!this.silenceBroadcast) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c));\n    }\n  }\n\n  // This method is wrapped in the constructor so that it will be called only\n  // if the data that would be broadcast has changed.\n  private maybeBroadcastWatch(c: Cache.WatchOptions) {\n    c.callback(\n      this.diff({\n        query: c.query,\n        variables: c.variables,\n        previousResult: c.previousResult && c.previousResult(),\n        optimistic: c.optimistic,\n      }),\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}