{"ast":null,"code":"var _a = Object.prototype,\n  toString = _a.toString,\n  hasOwnProperty = _a.hasOwnProperty;\nvar previousComparisons = new Map();\n/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */\nfunction equal(a, b) {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\nfunction check(a, b) {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  var aTag = toString.call(a);\n  var bTag = toString.call(b);\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n    // Fall through to object case...\n    case '[object Object]':\n      {\n        if (previouslyCompared(a, b)) return true;\n        var aKeys = Object.keys(a);\n        var bKeys = Object.keys(b);\n        // If `a` and `b` have a different number of enumerable keys, they\n        // must be different.\n        var keyCount = aKeys.length;\n        if (keyCount !== bKeys.length) return false;\n        // Now make sure they have the same keys.\n        for (var k = 0; k < keyCount; ++k) {\n          if (!hasOwnProperty.call(b, aKeys[k])) {\n            return false;\n          }\n        }\n        // Finally, check deep equality of all child properties.\n        for (var k = 0; k < keyCount; ++k) {\n          var key = aKeys[k];\n          if (!check(a[key], b[key])) {\n            return false;\n          }\n        }\n        return true;\n      }\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n    // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n    case '[object RegExp]':\n    case '[object String]':\n      return a == \"\" + b;\n    case '[object Map]':\n    case '[object Set]':\n      {\n        if (a.size !== b.size) return false;\n        if (previouslyCompared(a, b)) return true;\n        var aIterator = a.entries();\n        var isMap = aTag === '[object Map]';\n        while (true) {\n          var info = aIterator.next();\n          if (info.done) break;\n          // If a instanceof Set, aValue === aKey.\n          var _a = info.value,\n            aKey = _a[0],\n            aValue = _a[1];\n          // So this works the same way for both Set and Map.\n          if (!b.has(aKey)) {\n            return false;\n          }\n          // However, we care about deep equality of values only when dealing\n          // with Map structures.\n          if (isMap && !check(aValue, b.get(aKey))) {\n            return false;\n          }\n        }\n        return true;\n      }\n  }\n  // Otherwise the values are not equal.\n  return false;\n}\nfunction previouslyCompared(a, b) {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  var bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set());\n  }\n  bSet.add(b);\n  return false;\n}\nexport default equal;\nexport { equal };","map":{"version":3,"mappings":"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","names":["toString","hasOwnProperty","previousComparisons","Map","equal","a","b","check","clear","aTag","call","bTag","length","previouslyCompared","aKeys","Object","keys","bKeys","keyCount","k","key","name","message","size","aIterator","entries","isMap","info","next","done","aKey","aValue","has","get","bSet","set","Set","add"],"sources":["C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@wry\\equality\\src\\equality.ts"],"sourcesContent":["const { toString, hasOwnProperty } = Object.prototype;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = Object.keys(a);\n      const bKeys = Object.keys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}