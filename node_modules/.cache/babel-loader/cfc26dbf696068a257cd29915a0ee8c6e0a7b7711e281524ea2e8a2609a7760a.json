{"ast":null,"code":"export { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __rest } from 'tslib';\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nfunction Query(props) {\n  var children = props.children,\n    query = props.query,\n    options = __rest(props, [\"children\", \"query\"]);\n  var result = useQuery(query, options);\n  return children && result ? children(result) : null;\n}\n(function (Query) {\n  Query.propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool\n  };\n})(Query || (Query = {}));\nfunction Mutation(props) {\n  var _a = useMutation(props.mutation, props),\n    runMutation = _a[0],\n    result = _a[1];\n  return props.children ? props.children(runMutation, result) : null;\n}\n(function (Mutation) {\n  Mutation.propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    refetchQueries: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])), PropTypes.func]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string\n  };\n})(Mutation || (Mutation = {}));\nfunction Subscription(props) {\n  var result = useSubscription(props.subscription, props);\n  return props.children && result ? props.children(result) : null;\n}\n(function (Subscription) {\n  Subscription.propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool])\n  };\n})(Subscription || (Subscription = {}));\nexport { Mutation, Query, Subscription };","map":{"version":3,"mappings":"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","names":["Query","props","query","options","result","useQuery","children","client","PropTypes","object","func","isRequired","fetchPolicy","string","notifyOnNetworkStatusChange","bool","onCompleted","onError","pollInterval","number","variables","ssr","partialRefetch","returnPartialData","Mutation","runMutation","mutation","optimisticResponse","oneOfType","refetchQueries","arrayOf","awaitRefetchQueries","update","Subscription","useSubscription","subscription","onSubscriptionData","onSubscriptionComplete","shouldResubscribe"],"sources":["C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-components\\src\\Query.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-components\\src\\Mutation.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-components\\src\\Subscription.tsx"],"sourcesContent":["import { OperationVariables } from '@apollo/react-common';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { QueryComponentOptions } from './types';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return children && result ? children(result) : null;\n}\n\nexport namespace Query {\n  export const propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool\n  };\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { MutationComponentOptions } from './types';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport namespace Mutation {\n  export const propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    refetchQueries: PropTypes.oneOfType([\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n      ),\n      PropTypes.func\n    ]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string\n  };\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { SubscriptionComponentOptions } from './types';\n\nexport function Subscription<TData = any, TVariables = OperationVariables>(\n  props: SubscriptionComponentOptions<TData, TVariables>\n) {\n  const result = useSubscription(props.subscription, props);\n  return props.children && result ? props.children(result) : null;\n}\n\nexport namespace Subscription {\n  export const propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}