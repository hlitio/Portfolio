{"ast":null,"code":"import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\nfunction validateOperation(operation) {\n  var OPERATION_FIELDS = ['query', 'operationName', 'variables', 'extensions', 'context'];\n  for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n    var key = _a[_i];\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n    }\n  }\n  return operation;\n}\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n    _this.link = link;\n    return _this;\n  }\n  return LinkError;\n}(Error);\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n  var completed = false;\n  return new Promise(function (resolve, reject) {\n    observable.subscribe({\n      next: function (data) {\n        if (completed) {\n          process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject\n    });\n  });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n  return new Observable(function (observer) {\n    promise.then(function (value) {\n      observer.next(value);\n      observer.complete();\n    }).catch(observer.error.bind(observer));\n  });\n}\nfunction fromError(errorValue) {\n  return new Observable(function (observer) {\n    observer.error(errorValue);\n  });\n}\nfunction transformOperation(operation) {\n  var transformedOperation = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query\n  };\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? getOperationName(transformedOperation.query) : '';\n  }\n  return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n  var context = __assign({}, starting);\n  var setContext = function (next) {\n    if (typeof next === 'function') {\n      context = __assign({}, context, next(context));\n    } else {\n      context = __assign({}, context, next);\n    }\n  };\n  var getContext = function () {\n    return __assign({}, context);\n  };\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext\n  });\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext\n  });\n  Object.defineProperty(operation, 'toKey', {\n    enumerable: false,\n    value: function () {\n      return getKey(operation);\n    }\n  });\n  return operation;\n}\nfunction getKey(operation) {\n  var query = operation.query,\n    variables = operation.variables,\n    operationName = operation.operationName;\n  return JSON.stringify([operationName, query, variables]);\n}\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n  return new ApolloLink(function () {\n    return Observable.of();\n  });\n}\nfunction from(links) {\n  if (links.length === 0) return empty();\n  return links.map(toLink).reduce(function (x, y) {\n    return x.concat(y);\n  });\n}\nfunction split(test, left, right) {\n  var leftLink = toLink(left);\n  var rightLink = toLink(right || new ApolloLink(passthrough));\n  if (isTerminating(leftLink) && isTerminating(rightLink)) {\n    return new ApolloLink(function (operation) {\n      return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n    });\n  }\n}\nvar concat = function (first, second) {\n  var firstLink = toLink(first);\n  if (isTerminating(firstLink)) {\n    process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n    return firstLink;\n  }\n  var nextLink = toLink(second);\n  if (isTerminating(nextLink)) {\n    return new ApolloLink(function (operation) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op) || Observable.of();\n      }) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op, forward) || Observable.of();\n      }) || Observable.of();\n    });\n  }\n};\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n  };\n  ApolloLink.prototype.concat = function (next) {\n    return concat(this, next);\n  };\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n  };\n  ApolloLink.empty = empty;\n  ApolloLink.from = from;\n  ApolloLink.split = split;\n  ApolloLink.execute = execute;\n  return ApolloLink;\n}();\nfunction execute(link, operation) {\n  return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n}\nexport { ApolloLink, concat, createOperation, empty, execute, from, fromError, fromPromise, makePromise, split, toPromise };","map":{"version":3,"mappings":"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","names":["validateOperation","operation","OPERATION_FIELDS","_a","keys","_i","key","indexOf","process","tslib_1.__extends","message","link","_super","_this","Error","isTerminating","request","length","toPromise","observable","completed","Promise","resolve","reject","subscribe","next","data","error","makePromise","fromPromise","promise","Observable","then","value","observer","complete","catch","bind","fromError","errorValue","transformOperation","transformedOperation","variables","extensions","operationName","query","getOperationName","createOperation","starting","context","setContext","getContext","Object","defineProperty","enumerable","getKey","JSON","stringify","passthrough","op","forward","of","toLink","handler","ApolloLink","empty","from","links","map","reduce","x","y","concat","split","test","left","right","leftLink","rightLink","first","second","firstLink","nextLink","execute"],"sources":["C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-link\\src\\linkUtils.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\apollo-link\\src\\link.ts"],"sourcesContent":["import Observable from 'zen-observable-ts';\n\nimport { GraphQLRequest, Operation } from './types';\nimport { ApolloLink } from './link';\n\nimport { getOperationName } from 'apollo-utilities';\nimport { invariant, InvariantError } from 'ts-invariant';\nexport { getOperationName };\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    'query',\n    'operationName',\n    'variables',\n    'extensions',\n    'context',\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new InvariantError(`illegal argument: ${key}`);\n    }\n  }\n\n  return operation;\n}\n\nexport class LinkError extends Error {\n  public link: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport function isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: data => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`,\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n\n// backwards compat\nexport const makePromise = toPromise;\n\nexport function fromPromise<T>(promise: Promise<T>): Observable<T> {\n  return new Observable<T>(observer => {\n    promise\n      .then((value: T) => {\n        observer.next(value);\n        observer.complete();\n      })\n      .catch(observer.error.bind(observer));\n  });\n}\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>(observer => {\n    observer.error(errorValue);\n  });\n}\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== 'string'\n        ? getOperationName(transformedOperation.query)\n        : '';\n  }\n\n  return transformedOperation as Operation;\n}\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest,\n): Operation {\n  let context = { ...starting };\n  const setContext = next => {\n    if (typeof next === 'function') {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext = () => ({ ...context });\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext,\n  });\n\n  Object.defineProperty(operation, 'toKey', {\n    enumerable: false,\n    value: () => getKey(operation),\n  });\n\n  return operation as Operation;\n}\n\nexport function getKey(operation: GraphQLRequest) {\n  // XXX We're assuming here that query and variables will be serialized in\n  // the same order, which might not always be true.\n  const { query, variables, operationName } = operation;\n  return JSON.stringify([operationName, query, variables]);\n}\n","import Observable from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  GraphQLRequest,\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n} from './types';\n\nimport {\n  validateOperation,\n  isTerminating,\n  LinkError,\n  transformOperation,\n  createOperation,\n} from './linkUtils';\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nexport function empty(): ApolloLink {\n  return new ApolloLink(() => Observable.of());\n}\n\nexport function from(links: ApolloLink[]): ApolloLink {\n  if (links.length === 0) return empty();\n  return links.map(toLink).reduce((x, y) => x.concat(y));\n}\n\nexport function split(\n  test: (op: Operation) => boolean,\n  left: ApolloLink | RequestHandler,\n  right?: ApolloLink | RequestHandler,\n): ApolloLink {\n  const leftLink = toLink(left);\n  const rightLink = toLink(right || new ApolloLink(passthrough));\n\n  if (isTerminating(leftLink) && isTerminating(rightLink)) {\n    return new ApolloLink(operation => {\n      return test(operation)\n        ? leftLink.request(operation) || Observable.of()\n        : rightLink.request(operation) || Observable.of();\n    });\n  } else {\n    return new ApolloLink((operation, forward) => {\n      return test(operation)\n        ? leftLink.request(operation, forward) || Observable.of()\n        : rightLink.request(operation, forward) || Observable.of();\n    });\n  }\n}\n\n// join two Links together\nexport const concat = (\n  first: ApolloLink | RequestHandler,\n  second: ApolloLink | RequestHandler,\n) => {\n  const firstLink = toLink(first);\n  if (isTerminating(firstLink)) {\n    invariant.warn(\n      new LinkError(\n        `You are calling concat on a terminating link, which will have no effect`,\n        firstLink,\n      ),\n    );\n    return firstLink;\n  }\n  const nextLink = toLink(second);\n\n  if (isTerminating(nextLink)) {\n    return new ApolloLink(\n      operation =>\n        firstLink.request(\n          operation,\n          op => nextLink.request(op) || Observable.of(),\n        ) || Observable.of(),\n    );\n  } else {\n    return new ApolloLink((operation, forward) => {\n      return (\n        firstLink.request(operation, op => {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of()\n      );\n    });\n  }\n};\n\nexport class ApolloLink {\n  public static empty = empty;\n  public static from = from;\n  public static split = split;\n  public static execute = execute;\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n}\n\nexport function execute(\n  link: ApolloLink,\n  operation: GraphQLRequest,\n): Observable<FetchResult> {\n  return (\n    link.request(\n      createOperation(\n        operation.context,\n        transformOperation(validateOperation(operation)),\n      ),\n    ) || Observable.of()\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}