{"ast":null,"code":"import { parser, DocumentType, ApolloConsumer } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign, __rest } from 'tslib';\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Query, Mutation, Subscription } from '@apollo/react-components';\nimport { invariant } from 'ts-invariant';\nvar defaultMapPropsToOptions = function () {\n  return {};\n};\nvar defaultMapPropsToSkip = function () {\n  return false;\n};\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nfunction calculateVariablesFromProps(operation, props) {\n  var variables = {};\n  for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\n    var _b = _a[_i],\n      variable = _b.variable,\n      type = _b.type;\n    if (!variable.name || !variable.name.value) continue;\n    var variableName = variable.name.value;\n    var variableProp = props[variableName];\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\nvar GraphQLBase = function (_super) {\n  __extends(GraphQLBase, _super);\n  function GraphQLBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.withRef = false;\n    _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n    return _this;\n  }\n  GraphQLBase.prototype.getWrappedInstance = function () {\n    process.env.NODE_ENV === \"production\" ? invariant(this.withRef, 2) : invariant(this.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\n    return this.wrappedInstance;\n  };\n  GraphQLBase.prototype.setWrappedInstance = function (ref) {\n    this.wrappedInstance = ref;\n  };\n  return GraphQLBase;\n}(React.Component);\nfunction withQuery(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var operation = parser(document);\n  var _a = operationOptions.options,\n    options = _a === void 0 ? defaultMapPropsToOptions : _a,\n    _b = operationOptions.skip,\n    skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n    _c = operationOptions.alias,\n    alias = _c === void 0 ? 'Apollo' : _c;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = function () {\n      return options;\n    };\n  }\n  var mapPropsToSkip = skip;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = function () {\n      return skip;\n    };\n  }\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      GraphQL.prototype.render = function () {\n        var _this = this;\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : __assign({}, mapPropsToOptions(props));\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return React.createElement(Query, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          query: document\n        }), function (_a) {\n          var _b, _c;\n          var _ = _a.client,\n            data = _a.data,\n            r = __rest(_a, [\"client\", \"data\"]);\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n          if (shouldSkip) {\n            return React.createElement(WrappedComponent, __assign({}, props, {}));\n          }\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\nfunction withMutation(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var operation = parser(document);\n  var _a = operationOptions.options,\n    options = _a === void 0 ? defaultMapPropsToOptions : _a,\n    _b = operationOptions.alias,\n    alias = _b === void 0 ? 'Apollo' : _b;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = function () {\n    return options;\n  };\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      GraphQL.prototype.render = function () {\n        var props = this.props;\n        var opts = mapPropsToOptions(props);\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return React.createElement(Mutation, __assign({\n          ignoreResults: true\n        }, opts, {\n          mutation: document\n        }), function (mutate, _a) {\n          var _b, _c;\n          var data = _a.data,\n            r = __rest(_a, [\"data\"]);\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'mutate';\n          var resultName = operationOptions.name ? name + \"Result\" : 'result';\n          var childProps = (_b = {}, _b[name] = mutate, _b[resultName] = result, _b);\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = mutate, _c[resultName] = result, _c.ownProps = props, _c);\n            childProps = operationOptions.props(newResult);\n          }\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\nfunction withSubscription(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var operation = parser(document);\n  var _a = operationOptions.options,\n    options = _a === void 0 ? defaultMapPropsToOptions : _a,\n    _b = operationOptions.skip,\n    skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n    _c = operationOptions.alias,\n    alias = _c === void 0 ? 'Apollo' : _c,\n    shouldResubscribe = operationOptions.shouldResubscribe;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = function () {\n    return options;\n  };\n  var mapPropsToSkip = skip;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = function () {\n    return skip;\n  };\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n      function GraphQL(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n          resubscribe: false\n        };\n        return _this;\n      }\n      GraphQL.prototype.componentDidUpate = function (prevProps) {\n        if (shouldResubscribe) {\n          this.setState({\n            resubscribe: shouldResubscribe(prevProps, this.props)\n          });\n        }\n      };\n      GraphQL.prototype.render = function () {\n        var _this = this;\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : mapPropsToOptions(props);\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return React.createElement(Subscription, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          subscription: document,\n          shouldResubscribe: this.state.resubscribe\n        }), function (_a) {\n          var _b, _c;\n          var data = _a.data,\n            r = __rest(_a, [\"data\"]);\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n          if (shouldSkip) {\n            return React.createElement(WrappedComponent, __assign({}, props, {}));\n          }\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\nfunction graphql(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\nfunction getDisplayName$1(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nfunction withApollo(WrappedComponent, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var withDisplayName = \"withApollo(\" + getDisplayName$1(WrappedComponent) + \")\";\n  var WithApollo = function (_super) {\n    __extends(WithApollo, _super);\n    function WithApollo(props) {\n      var _this = _super.call(this, props) || this;\n      _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n      return _this;\n    }\n    WithApollo.prototype.getWrappedInstance = function () {\n      process.env.NODE_ENV === \"production\" ? invariant(operationOptions.withRef, 1) : invariant(operationOptions.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\n      return this.wrappedInstance;\n    };\n    WithApollo.prototype.setWrappedInstance = function (ref) {\n      this.wrappedInstance = ref;\n    };\n    WithApollo.prototype.render = function () {\n      var _this = this;\n      return React.createElement(ApolloConsumer, null, function (client) {\n        var props = Object.assign({}, _this.props, {\n          client: client,\n          ref: operationOptions.withRef ? _this.setWrappedInstance : undefined\n        });\n        return React.createElement(WrappedComponent, __assign({}, props));\n      });\n    };\n    WithApollo.displayName = withDisplayName;\n    WithApollo.WrappedComponent = WrappedComponent;\n    return WithApollo;\n  }(React.Component);\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\nexport { graphql, withApollo, withMutation, withQuery, withSubscription };","map":{"version":3,"mappings":"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","names":["defaultMapPropsToOptions","defaultMapPropsToSkip","getDisplayName","WrappedComponent","displayName","name","calculateVariablesFromProps","operation","props","variables","_a","_i","variable","type","value","variableName","variableProp","kind","undefined","__extends","_super","_this","setWrappedInstance","bind","GraphQLBase","process","wrappedInstance","ref","React","Component","withQuery","document","operationOptions","parser","options","_b","skip","_c","alias","mapPropsToOptions","mapPropsToSkip","lastResultProps","graphQLDisplayName","GraphQL","shouldSkip","opts","Object","create","length","Query","query","data","r","withRef","assign","result","childProps","newResult","hoistNonReactStatics","withMutation","Mutation","ignoreResults","mutation","mutate","resultName","withSubscription","shouldResubscribe","state","resubscribe","prevProps","setState","Subscription","subscription","graphql","DocumentType","withApollo","withDisplayName","WithApollo","ApolloConsumer","client"],"sources":["C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-hoc\\src\\hoc-utils.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-hoc\\src\\query-hoc.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-hoc\\src\\mutation-hoc.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-hoc\\src\\subscription-hoc.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-hoc\\src\\graphql.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-hoc\\src\\withApollo.tsx"],"sourcesContent":["import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { IDocumentDefinition, OperationVariables } from '@apollo/react-common';\n\nexport const defaultMapPropsToOptions = () => ({});\nexport const defaultMapResultToProps: <P>(props: P) => P = props => props;\nexport const defaultMapPropsToSkip = () => false;\n\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function calculateVariablesFromProps<TProps>(\n  operation: IDocumentDefinition,\n  props: TProps\n) {\n  let variables: OperationVariables = {};\n  for (let { variable, type } of operation.variables) {\n    if (!variable.name || !variable.name.value) continue;\n\n    const variableName = variable.name.value;\n    const variableProp = (props as any)[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    // Allow optional props\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n\nexport type RefSetter<TChildProps> = (\n  ref: React.ComponentClass<TChildProps>\n) => void | void;\n\n// base class for hocs to easily manage refs\nexport class GraphQLBase<\n  TProps,\n  TChildProps,\n  TState = any\n  > extends React.Component<TProps, TState> {\n  public withRef: boolean = false;\n  // wrapped instance\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\n  }\n\n  getWrappedInstance() {\n    invariant(\n      this.withRef,\n      `To access the wrapped instance, you need to specify ` +\n      `{ withRef: true } in the options`\n    );\n\n    return this.wrappedInstance;\n  }\n\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\n    this.wrappedInstance = ref;\n  }\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Query } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withQuery<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = () => options as BaseQueryOptions;\n  }\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = () => skip as any;\n  }\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : { ...mapPropsToOptions(props) };\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Query\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            query={document}\n          >\n            {({ client: _, data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Query>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  parser,\n  BaseMutationOptions,\n  MutationFunction,\n  MutationResult\n} from '@apollo/react-common';\nimport { Mutation } from '@apollo/react-components';\n\nimport {\n  defaultMapPropsToOptions,\n  getDisplayName,\n  calculateVariablesFromProps,\n  GraphQLBase\n} from './hoc-utils';\nimport { OperationOption, OptionProps, MutateProps } from './types';\n\nexport function withMutation<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = MutateProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n\n  const {\n    options = defaultMapPropsToOptions,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseMutationOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseMutationOptions;\n\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      render() {\n        let props = this.props as TProps;\n        const opts = mapPropsToOptions(props);\n\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Mutation ignoreResults {...opts} mutation={document}>\n            {(\n              mutate: MutationFunction<TData, TGraphQLVariables>,\n              { data, ...r }: MutationResult<TData>\n            ) => {\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Mutation component's shape here to replicate that\n              // this matches the query HoC\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'mutate';\n              const resultName = operationOptions.name\n                ? `${name}Result`\n                : 'result';\n              let childProps = ({\n                [name]: mutate,\n                [resultName]: result\n              } as any) as TChildProps;\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: mutate,\n                  [resultName]: result,\n                  ownProps: props\n                };\n                childProps = operationOptions.props(newResult) as any;\n              }\n\n              return <WrappedComponent {...props} {...childProps} />;\n            }}\n          </Mutation>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Subscription } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withSubscription<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo',\n    shouldResubscribe\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseQueryOptions;\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = () => skip as any;\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<\n      TProps,\n      TChildProps,\n      { resubscribe: boolean }\n    > {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      constructor(props: TProps) {\n        super(props);\n        this.state = { resubscribe: false };\n      }\n\n      componentDidUpate(prevProps: TProps) {\n        if (shouldResubscribe) {\n          this.setState({\n            resubscribe: shouldResubscribe(prevProps, this.props)\n          });\n        }\n      }\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return (\n          <Subscription\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            subscription={document}\n            shouldResubscribe={this.state.resubscribe}\n          >\n            {({ data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Subscription>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import { DocumentNode } from 'graphql';\nimport { parser, DocumentType } from '@apollo/react-common';\n\nimport { withQuery } from './query-hoc';\nimport { withMutation } from './mutation-hoc';\nimport { withSubscription } from './subscription-hoc';\nimport { OperationOption, DataProps, MutateProps } from './types';\n\nexport function graphql<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = Partial<DataProps<TData, TGraphQLVariables>> &\n    Partial<MutateProps<TData, TGraphQLVariables>>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\n","import React from 'react';\nimport { ApolloConsumer } from '@apollo/react-common';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { invariant } from 'ts-invariant';\n\nimport { OperationOption, WithApolloClient } from './types';\n\nfunction getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function withApollo<TProps, TResult = any>(\n  WrappedComponent: React.ComponentType<\n    WithApolloClient<Omit<TProps, 'client'>>\n  >,\n  operationOptions: OperationOption<TProps, TResult> = {}\n): React.ComponentClass<Omit<TProps, 'client'>> {\n  const withDisplayName = `withApollo(${getDisplayName(WrappedComponent)})`;\n\n  class WithApollo extends React.Component<Omit<TProps, 'client'>> {\n    static displayName = withDisplayName;\n    static WrappedComponent = WrappedComponent;\n\n    // wrapped instance\n    private wrappedInstance: any;\n\n    constructor(props: Omit<TProps, 'client'>) {\n      super(props);\n      this.setWrappedInstance = this.setWrappedInstance.bind(this);\n    }\n\n    getWrappedInstance() {\n      invariant(\n        operationOptions.withRef,\n        `To access the wrapped instance, you need to specify ` +\n          `{ withRef: true } in the options`\n      );\n\n      return this.wrappedInstance;\n    }\n\n    setWrappedInstance(ref: React.ComponentType<WithApolloClient<TProps>>) {\n      this.wrappedInstance = ref;\n    }\n\n    render() {\n      return (\n        <ApolloConsumer>\n          {client => {\n            const props = Object.assign({}, this.props, {\n              client,\n              ref: operationOptions.withRef\n                ? this.setWrappedInstance\n                : undefined\n            });\n            return <WrappedComponent {...props} />;\n          }}\n        </ApolloConsumer>\n      );\n    }\n  }\n\n  // Make sure we preserve any custom statics on the original component.\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}