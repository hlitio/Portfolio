{"ast":null,"code":"import React from 'react';\nimport { invariant } from 'ts-invariant';\nvar apolloContext;\nfunction getApolloContext() {\n  if (!apolloContext) {\n    apolloContext = React.createContext({});\n  }\n  return apolloContext;\n}\nfunction resetApolloContext() {\n  apolloContext = React.createContext({});\n}\nvar ApolloProvider = function (_a) {\n  var client = _a.client,\n    children = _a.children;\n  var ApolloContext = getApolloContext();\n  return React.createElement(ApolloContext.Consumer, null, function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (client && context.client !== client) {\n      context = Object.assign({}, context, {\n        client: client\n      });\n    }\n    process.env.NODE_ENV === \"production\" ? invariant(context.client, 5) : invariant(context.client, 'ApolloProvider was not passed a client instance. Make ' + 'sure you pass in your client via the \"client\" prop.');\n    return React.createElement(ApolloContext.Provider, {\n      value: context\n    }, children);\n  });\n};\nvar ApolloConsumer = function (props) {\n  var ApolloContext = getApolloContext();\n  return React.createElement(ApolloContext.Consumer, null, function (context) {\n    process.env.NODE_ENV === \"production\" ? invariant(context && context.client, 6) : invariant(context && context.client, 'Could not find \"client\" in the context of ApolloConsumer. ' + 'Wrap the root component in an <ApolloProvider>.');\n    return props.children(context.client);\n  });\n};\nvar DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nfunction operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\nfunction parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  process.env.NODE_ENV === \"production\" ? invariant(!!document && !!document.kind, 1) : invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\");\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 2) : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\");\n  process.env.NODE_ENV === \"production\" ? invariant(queries.length + mutations.length + subscriptions.length <= 1, 3) : invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") + (\"subscriptions and \" + mutations.length + \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  process.env.NODE_ENV === \"production\" ? invariant(definitions.length === 1, 4) : invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" + (definitions.length + \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport { ApolloConsumer, ApolloProvider, DocumentType, getApolloContext, operationName, parser, resetApolloContext };","map":{"version":3,"mappings":"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","names":["apolloContext","getApolloContext","React","createContext","resetApolloContext","ApolloProvider","_a","client","children","ApolloContext","Consumer","context","Object","assign","process","Provider","value","ApolloConsumer","props","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","NODE_ENV","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","invariant","variableDefinitions","definition"],"sources":["C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-common\\src\\context\\ApolloContext.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-common\\src\\context\\ApolloProvider.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-common\\src\\context\\ApolloConsumer.tsx","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\@apollo\\react-common\\src\\parser\\parser.ts"],"sourcesContent":["import React from 'react';\nimport ApolloClient from 'apollo-client';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: Record<any, any>;\n}\n\nlet apolloContext: React.Context<ApolloContextValue>;\n\nexport function getApolloContext() {\n  if (!apolloContext) {\n    apolloContext = React.createContext<ApolloContextValue>({});\n  }\n  return apolloContext;\n}\n\nexport function resetApolloContext() {\n  apolloContext = React.createContext<ApolloContextValue>({});\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-client';\nimport { invariant } from 'ts-invariant';\n\nimport { getApolloContext } from './ApolloContext';\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const ApolloProvider: React.FC<ApolloProviderProps<any>> = ({\n  client,\n  children\n}) => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context = {}) => {\n        if (client && context.client !== client) {\n          context = Object.assign({}, context, { client });\n        }\n\n        invariant(\n          context.client,\n          'ApolloProvider was not passed a client instance. Make ' +\n            'sure you pass in your client via the \"client\" prop.'\n        );\n\n        return (\n          <ApolloContext.Provider value={context}>\n            {children}\n          </ApolloContext.Provider>\n        );\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n","import React from 'react';\nimport ApolloClient from 'apollo-client';\nimport { invariant } from 'ts-invariant';\n\nimport { getApolloContext } from './ApolloContext';\n\nexport interface ApolloConsumerProps {\n  children: (client: ApolloClient<object>) => React.ReactChild | null;\n}\n\nexport const ApolloConsumer: React.FC<ApolloConsumerProps> = props => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any) => {\n        invariant(\n          context && context.client,\n          'Could not find \"client\" in the context of ApolloConsumer. ' +\n            'Wrap the root component in an <ApolloProvider>.'\n        );\n        return props.children(context.client);\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n","import {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to saftey check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}