{"ast":null,"code":"import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\nvar NetworkStatus;\n(function (NetworkStatus) {\n  NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n  NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n  NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n  NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n  NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n  NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n  NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n  return networkStatus < 7;\n}\nvar Observable = function (_super) {\n  __extends(Observable, _super);\n  function Observable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Observable.prototype[$$observable] = function () {\n    return this;\n  };\n  Observable.prototype['@@observable'] = function () {\n    return this;\n  };\n  return Observable;\n}(Observable$1);\nfunction isNonEmptyArray(value) {\n  return Array.isArray(value) && value.length > 0;\n}\nfunction isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n  var message = '';\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += \"GraphQL error: \" + errorMessage + \"\\n\";\n    });\n  }\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n  message = message.replace(/\\n$/, '');\n  return message;\n};\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n      networkError = _a.networkError,\n      errorMessage = _a.errorMessage,\n      extraInfo = _a.extraInfo;\n    var _this = _super.call(this, errorMessage) || this;\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n    if (!errorMessage) {\n      _this.message = generateErrorMessage(_this);\n    } else {\n      _this.message = errorMessage;\n    }\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n  return ApolloError;\n}(Error);\nvar FetchType;\n(function (FetchType) {\n  FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n  FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n  FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\nvar hasError = function (storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n  return storeValue && (storeValue.networkError || policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors));\n};\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      options = _a.options,\n      _b = _a.shouldSubscribe,\n      shouldSubscribe = _b === void 0 ? true : _b;\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe;\n    var opDef = getOperationDefinition(options.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    _this.queryManager = queryManager;\n    return _this;\n  }\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.currentResult = function () {\n    var result = this.getCurrentResult();\n    if (result.data === undefined) {\n      result.data = {};\n    }\n    return result;\n  };\n  ObservableQuery.prototype.getCurrentResult = function () {\n    if (this.isTornDown) {\n      var lastResult = this.lastResult;\n      return {\n        data: !this.lastError && lastResult && lastResult.data || void 0,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error\n      };\n    }\n    var _a = this.queryManager.getCurrentQueryResult(this),\n      data = _a.data,\n      partial = _a.partial;\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n    var result;\n    var fetchPolicy = this.options.fetchPolicy;\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    if (queryStoreValue) {\n      var networkStatus = queryStoreValue.networkStatus;\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return {\n          data: void 0,\n          loading: false,\n          networkStatus: networkStatus,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          })\n        };\n      }\n      if (queryStoreValue.variables) {\n        this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n        this.variables = this.options.variables;\n      }\n      result = {\n        data: data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus: networkStatus\n      };\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n    } else {\n      var loading = isNetworkFetchPolicy || partial && fetchPolicy !== 'cache-only';\n      result = {\n        data: data,\n        loading: loading,\n        networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready\n      };\n    }\n    if (!partial) {\n      this.updateLastResult(__assign(__assign({}, result), {\n        stale: false\n      }));\n    }\n    return __assign(__assign({}, result), {\n      partial: partial\n    });\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    var snapshot = this.lastResultSnapshot;\n    return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && isEqual(snapshot.data, newResult.data));\n  };\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    var queryStore = this.queryManager.queryStore.get(this.queryId);\n    if (queryStore) {\n      queryStore.networkError = null;\n      queryStore.graphQLErrors = [];\n    }\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n    if (!isEqual(this.variables, variables)) {\n      this.variables = __assign(__assign({}, this.variables), variables);\n    }\n    if (!isEqual(this.options.variables, this.variables)) {\n      this.options.variables = __assign(__assign({}, this.options.variables), this.variables);\n    }\n    return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), {\n      fetchPolicy: fetchPolicy\n    }), FetchType.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 2) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: 'network-only'\n    });\n    var qid = this.queryManager.generateQueryId();\n    return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        return fetchMoreOptions.updateQuery(previousResult, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n      });\n      _this.queryManager.stopQuery(qid);\n      return fetchMoreResult;\n    }, function (error) {\n      _this.queryManager.stopQuery(qid);\n      throw error;\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldFetchPolicy = this.options.fetchPolicy;\n    this.options = __assign(__assign({}, this.options), opts);\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n    var fetchPolicy = opts.fetchPolicy;\n    return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' || oldFetchPolicy === 'standby' || fetchPolicy === 'network-only'), opts.fetchResults);\n  };\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    }\n    this.isTornDown = false;\n    variables = variables || this.variables;\n    if (!tryFetch && isEqual(variables, this.variables)) {\n      return this.observers.size && fetchResults ? this.result() : Promise.resolve();\n    }\n    this.variables = this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.queryManager.fetchQuery(this.queryId, this.options);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var _a = queryManager.getQueryWithPreviousResult(this.queryId),\n      previousResult = _a.previousResult,\n      variables = _a.variables,\n      document = _a.document;\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n    if (newResult) {\n      queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult) {\n    var previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);\n    return previousResult;\n  };\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n    try {\n      var subObserver = observer._subscription._observer;\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch (_a) {}\n    var first = !this.observers.size;\n    this.observers.add(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n    if (first) {\n      this.setUpQuery();\n    }\n    return function () {\n      if (_this.observers.delete(observer) && !_this.observers.size) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n    var _a = this,\n      queryManager = _a.queryManager,\n      queryId = _a.queryId;\n    if (this.shouldSubscribe) {\n      queryManager.addObservableQuery(queryId, this);\n    }\n    if (this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      queryManager.startPollingQuery(this.options, queryId);\n    }\n    var onError = function (error) {\n      _this.updateLastResult(__assign(__assign({}, _this.lastResult), {\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false\n      }));\n      iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n    };\n    queryManager.observeQuery(queryId, this.options, {\n      next: function (result) {\n        if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n          var previousResult_1 = _this.updateLastResult(result);\n          var _a = _this.options,\n            query_1 = _a.query,\n            variables = _a.variables,\n            fetchPolicy_1 = _a.fetchPolicy;\n          if (queryManager.transform(query_1).hasClientExports) {\n            queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n              var previousVariables = _this.variables;\n              _this.variables = _this.options.variables = variables;\n              if (!result.loading && previousResult_1 && fetchPolicy_1 !== 'cache-only' && queryManager.transform(query_1).serverQuery && !isEqual(previousVariables, variables)) {\n                _this.refetch();\n              } else {\n                iterateObserversSafely(_this.observers, 'next', result);\n              }\n            });\n          } else {\n            iterateObserversSafely(_this.observers, 'next', result);\n          }\n        }\n      },\n      error: onError\n    }).catch(onError);\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    var queryManager = this.queryManager;\n    this.isTornDown = true;\n    queryManager.stopPollingQuery(this.queryId);\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    queryManager.removeObservableQuery(this.queryId);\n    queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n  };\n  return ObservableQuery;\n}(Observable);\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n  var fetchPolicy = obsQuery.options.fetchPolicy;\n  process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 3) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\nvar MutationStore = function () {\n  function MutationStore() {\n    this.store = {};\n  }\n  MutationStore.prototype.getStore = function () {\n    return this.store;\n  };\n  MutationStore.prototype.get = function (mutationId) {\n    return this.store[mutationId];\n  };\n  MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n    this.store[mutationId] = {\n      mutation: mutation,\n      variables: variables || {},\n      loading: true,\n      error: null\n    };\n  };\n  MutationStore.prototype.markMutationError = function (mutationId, error) {\n    var mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = error;\n    }\n  };\n  MutationStore.prototype.markMutationResult = function (mutationId) {\n    var mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = null;\n    }\n  };\n  MutationStore.prototype.reset = function () {\n    this.store = {};\n  };\n  return MutationStore;\n}();\nvar QueryStore = function () {\n  function QueryStore() {\n    this.store = {};\n  }\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n    process.env.NODE_ENV === \"production\" ? invariant(!previousQuery || previousQuery.document === query.document || isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery || previousQuery.document === query.document || isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n    var isSetVariables = false;\n    var previousVariables = null;\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n    var networkStatus;\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n    var graphQLErrors = [];\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    };\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    var storeValue = this.store && this.store[queryId];\n    if (storeValue) {\n      storeValue.networkError = null;\n      storeValue.previousVariables = null;\n      if (complete) {\n        storeValue.networkStatus = NetworkStatus.ready;\n      }\n    }\n  };\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this;\n    Object.keys(this.store).forEach(function (queryId) {\n      if (observableQueryIds.indexOf(queryId) < 0) {\n        _this.stopQuery(queryId);\n      } else {\n        _this.store[queryId].networkStatus = NetworkStatus.loading;\n      }\n    });\n  };\n  return QueryStore;\n}();\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n      client = _a.client,\n      resolvers = _a.resolvers,\n      fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n    if (client) {\n      this.client = client;\n    }\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n      remoteResult = _a.remoteResult,\n      context = _a.context,\n      variables = _a.variables,\n      _b = _a.onlyRunForcedResolvers,\n      onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n        return [2, remoteResult];\n      });\n    });\n  };\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n      process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' + 'were specified. This means ApolloClient local resolver handling ' + 'has been disabled, and @client directives will be passed through ' + 'to your link chain.');\n    }\n    return null;\n  };\n  LocalState.prototype.serverQuery = function (document) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  };\n  LocalState.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var cache = this.cache;\n    var newContext = __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        if (cache.config) {\n          return cache.config.dataIdFromObject(obj);\n        } else {\n          process.env.NODE_ENV === \"production\" ? invariant(false, 6) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' + 'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n        }\n      }\n    });\n    return newContext;\n  };\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (context === void 0) {\n      context = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n      var _this = this;\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                process.env.NODE_ENV === \"production\" ? invariant(fragment, 7) : invariant(fragment, \"No fragment named \" + selection.name.value);\n              }\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n              return [2];\n            });\n          });\n        };\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n      var _this = this;\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n            if (resolve) {\n              resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }));\n            }\n          }\n        }\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n          if (!field.selectionSet) {\n            return result;\n          }\n          if (result == null) {\n            return result;\n          }\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n  return LocalState;\n}();\nfunction multiplex(inner) {\n  var observers = new Set();\n  var sub = null;\n  return new Observable(function (observer) {\n    observers.add(observer);\n    sub = sub || inner.subscribe({\n      next: function (value) {\n        observers.forEach(function (obs) {\n          return obs.next && obs.next(value);\n        });\n      },\n      error: function (error) {\n        observers.forEach(function (obs) {\n          return obs.error && obs.error(error);\n        });\n      },\n      complete: function () {\n        observers.forEach(function (obs) {\n          return obs.complete && obs.complete();\n        });\n      }\n    });\n    return function () {\n      if (observers.delete(observer) && !observers.size && sub) {\n        sub.unsubscribe();\n        sub = null;\n      }\n    };\n  });\n}\nfunction asyncMap(observable, mapFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n      error = observer.error,\n      complete = observer.complete;\n    var activeNextCount = 0;\n    var completed = false;\n    var handler = {\n      next: function (value) {\n        ++activeNextCount;\n        new Promise(function (resolve) {\n          resolve(mapFn(value));\n        }).then(function (result) {\n          --activeNextCount;\n          next && next.call(observer, result);\n          completed && handler.complete();\n        }, function (e) {\n          --activeNextCount;\n          error && error.call(observer, e);\n        });\n      },\n      error: function (e) {\n        error && error.call(observer, e);\n      },\n      complete: function () {\n        completed = true;\n        if (!activeNextCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var link = _a.link,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      store = _a.store,\n      _c = _a.onBroadcast,\n      onBroadcast = _c === void 0 ? function () {\n        return undefined;\n      } : _c,\n      _d = _a.ssrMode,\n      ssrMode = _d === void 0 ? false : _d,\n      _e = _a.clientAwareness,\n      clientAwareness = _e === void 0 ? {} : _e,\n      localState = _a.localState,\n      assumeImmutableResults = _a.assumeImmutableResults;\n    this.mutationStore = new MutationStore();\n    this.queryStore = new QueryStore();\n    this.clientAwareness = {};\n    this.idCounter = 1;\n    this.queries = new Map();\n    this.fetchQueryRejectFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.inFlightLinkObservables = new Map();\n    this.pollingInfoByQueryId = new Map();\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: store.getCache()\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError('QueryManager stopped while query was in flight'));\n    });\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueriesByName = _a.updateQueries,\n      _b = _a.refetchQueries,\n      refetchQueries = _b === void 0 ? [] : _b,\n      _c = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _c === void 0 ? false : _c,\n      updateWithProxyFn = _a.update,\n      _d = _a.errorPolicy,\n      errorPolicy = _d === void 0 ? 'none' : _d,\n      fetchPolicy = _a.fetchPolicy,\n      _e = _a.context,\n      context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, generateUpdateQueriesInfo, self;\n      var _this = this;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 9) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 10) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateQueryId();\n            mutation = this.transform(mutation).document;\n            this.setQuery(mutationId, function () {\n              return {\n                document: mutation\n              };\n            });\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n          case 2:\n            generateUpdateQueriesInfo = function () {\n              var ret = {};\n              if (updateQueriesByName) {\n                _this.queries.forEach(function (_a, queryId) {\n                  var observableQuery = _a.observableQuery;\n                  if (observableQuery) {\n                    var queryName = observableQuery.queryName;\n                    if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                      ret[queryId] = {\n                        updater: updateQueriesByName[queryName],\n                        query: _this.queryStore.get(queryId)\n                      };\n                    }\n                  }\n                });\n              }\n              return ret;\n            };\n            this.mutationStore.initMutation(mutationId, mutation, variables);\n            this.dataStore.markMutationInit({\n              mutationId: mutationId,\n              document: mutation,\n              variables: variables,\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n              optimisticResponse: optimisticResponse\n            });\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function (result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n                  self.mutationStore.markMutationResult(mutationId);\n                  if (fetchPolicy !== 'no-cache') {\n                    self.dataStore.markMutationResult({\n                      mutationId: mutationId,\n                      result: result,\n                      document: mutation,\n                      variables: variables,\n                      updateQueries: generateUpdateQueriesInfo(),\n                      update: updateWithProxyFn\n                    });\n                  }\n                  storeResult = result;\n                },\n                error: function (err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n                  self.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse\n                  });\n                  self.broadcastQueries();\n                  self.setQuery(mutationId, function () {\n                    return {\n                      document: null\n                    };\n                  });\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function () {\n                  if (error) {\n                    self.mutationStore.markMutationError(mutationId, error);\n                  }\n                  self.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse\n                  });\n                  self.broadcastQueries();\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n                  var refetchQueryPromises = [];\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n                          if (observableQuery && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    self.setQuery(mutationId, function () {\n                      return {\n                        document: null\n                      };\n                    });\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n                    resolve(storeResult);\n                  });\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n            query = this.transform(options.query).document;\n            variables = this.getVariables(query, options.variables);\n            if (!this.transform(query).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(query, variables, context)];\n          case 1:\n            variables = _e.sent();\n            _e.label = 2;\n          case 2:\n            options = __assign(__assign({}, options), {\n              variables: variables\n            });\n            isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n            needToFetch = isNetworkOnly;\n            if (!isNetworkOnly) {\n              _d = this.dataStore.getCache().diff({\n                query: query,\n                variables: variables,\n                returnPartialData: true,\n                optimistic: false\n              }), complete = _d.complete, result = _d.result;\n              needToFetch = !complete || fetchPolicy === 'cache-and-network';\n              storeResult = result;\n            }\n            shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n            if (hasDirectives(['live'], query)) shouldFetch = true;\n            requestId = this.idCounter++;\n            cancel = fetchPolicy !== 'no-cache' ? this.updateQueryWatch(queryId, query, options) : undefined;\n            this.setQuery(queryId, function () {\n              return {\n                document: query,\n                lastRequestId: requestId,\n                invalidated: true,\n                cancel: cancel\n              };\n            });\n            this.invalidate(fetchMoreForQueryId);\n            this.queryStore.initQuery({\n              queryId: queryId,\n              document: query,\n              storePreviousVariables: shouldFetch,\n              variables: variables,\n              isPoll: fetchType === FetchType.poll,\n              isRefetch: fetchType === FetchType.refetch,\n              metadata: metadata,\n              fetchMoreForQueryId: fetchMoreForQueryId\n            });\n            this.broadcastQueries();\n            if (shouldFetch) {\n              networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: options,\n                fetchMoreForQueryId: fetchMoreForQueryId\n              }).catch(function (error) {\n                if (isApolloError(error)) {\n                  throw error;\n                } else {\n                  if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                    _this.invalidate(queryId);\n                    _this.invalidate(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                  }\n                  throw new ApolloError({\n                    networkError: error\n                  });\n                }\n              });\n              if (fetchPolicy !== 'cache-and-network') {\n                return [2, networkResult];\n              }\n              networkResult.catch(function () {});\n            }\n            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n            this.invalidate(queryId);\n            this.invalidate(fetchMoreForQueryId);\n            if (this.transform(query).hasForcedResolvers) {\n              return [2, this.localState.runResolvers({\n                document: query,\n                remoteResult: {\n                  data: storeResult\n                },\n                context: context,\n                variables: variables,\n                onlyRunForcedResolvers: true\n              }).then(function (result) {\n                _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                _this.broadcastQueries();\n                return result;\n              })];\n            }\n            this.broadcastQueries();\n            return [2, {\n              data: storeResult\n            }];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n    var fetchPolicy = _a.fetchPolicy,\n      variables = _a.variables,\n      errorPolicy = _a.errorPolicy;\n    if (fetchPolicy === 'no-cache') {\n      this.setQuery(queryId, function () {\n        return {\n          newData: {\n            result: result.data,\n            complete: true\n          }\n        };\n      });\n    } else {\n      this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n    }\n  };\n  QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n    var _this = this;\n    function invoke(method, argument) {\n      if (observer[method]) {\n        try {\n          observer[method](argument);\n        } catch (e) {\n          process.env.NODE_ENV === \"production\" || invariant.error(e);\n        }\n      } else if (method === 'error') {\n        process.env.NODE_ENV === \"production\" || invariant.error(argument);\n      }\n    }\n    return function (queryStoreValue, newData) {\n      _this.invalidate(queryId, false);\n      if (!queryStoreValue) return;\n      var _a = _this.getQuery(queryId),\n        observableQuery = _a.observableQuery,\n        document = _a.document;\n      var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;\n      if (fetchPolicy === 'standby') return;\n      var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n      var lastResult = observableQuery && observableQuery.getLastResult();\n      var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== queryStoreValue.networkStatus);\n      var shouldNotifyIfLoading = options.returnPartialData || !newData && queryStoreValue.previousVariables || networkStatusChanged && options.notifyOnNetworkStatusChange || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n      if (loading && !shouldNotifyIfLoading) {\n        return;\n      }\n      var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n      var errorPolicy = observableQuery && observableQuery.options.errorPolicy || options.errorPolicy || 'none';\n      if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n        return invoke('error', new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError\n        }));\n      }\n      try {\n        var data = void 0;\n        var isMissing = void 0;\n        if (newData) {\n          if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n            _this.setQuery(queryId, function () {\n              return {\n                newData: null\n              };\n            });\n          }\n          data = newData.result;\n          isMissing = !newData.complete;\n        } else {\n          var lastError = observableQuery && observableQuery.getLastError();\n          var errorStatusChanged = errorPolicy !== 'none' && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors;\n          if (lastResult && lastResult.data && !errorStatusChanged) {\n            data = lastResult.data;\n            isMissing = false;\n          } else {\n            var diffResult = _this.dataStore.getCache().diff({\n              query: document,\n              variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n              returnPartialData: true,\n              optimistic: true\n            });\n            data = diffResult.result;\n            isMissing = !diffResult.complete;\n          }\n        }\n        var stale = isMissing && !(options.returnPartialData || fetchPolicy === 'cache-only');\n        var resultFromStore = {\n          data: stale ? lastResult && lastResult.data : data,\n          loading: loading,\n          networkStatus: queryStoreValue.networkStatus,\n          stale: stale\n        };\n        if (errorPolicy === 'all' && hasGraphQLErrors) {\n          resultFromStore.errors = queryStoreValue.graphQLErrors;\n        }\n        invoke('next', resultFromStore);\n      } catch (networkError) {\n        invoke('error', new ApolloError({\n          networkError: networkError\n        }));\n      }\n    };\n  };\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var cache = this.dataStore.getCache();\n      var transformed = cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 11) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n    options.variables = this.getVariables(options.query, options.variables);\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var transformedOptions = __assign({}, options);\n    return new ObservableQuery({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe\n    });\n  };\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 12) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 13) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    return new Promise(function (resolve, reject) {\n      var watchedQuery = _this.watchQuery(options, false);\n      _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n      watchedQuery.result().then(resolve, reject).then(function () {\n        return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n      });\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.idCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(queryId);\n  };\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.setQuery(queryId, function (_a) {\n      var listeners = _a.listeners;\n      listeners.add(listener);\n      return {\n        invalidated: false\n      };\n    });\n  };\n  QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n    var _this = this;\n    var cancel = this.getQuery(queryId).cancel;\n    if (cancel) cancel();\n    var previousResult = function () {\n      var previousResult = null;\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n      return previousResult;\n    };\n    return this.dataStore.getCache().watch({\n      query: document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function (newData) {\n        _this.setQuery(queryId, function () {\n          return {\n            invalidated: true,\n            newData: newData\n          };\n        });\n      }\n    });\n  };\n  QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: observableQuery\n      };\n    });\n  };\n  QueryManager.prototype.removeObservableQuery = function (queryId) {\n    var cancel = this.getQuery(queryId).cancel;\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: null\n      };\n    });\n    if (cancel) cancel();\n  };\n  QueryManager.prototype.clearStore = function () {\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    });\n    var resetIds = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) resetIds.push(queryId);\n    });\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n    return this.dataStore.reset();\n  };\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        _this.setQuery(queryId, function () {\n          return {\n            newData: null\n          };\n        });\n        _this.invalidate(queryId);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n    this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n    return this.fetchQuery(queryId, options);\n  };\n  QueryManager.prototype.startQuery = function (queryId, options, listener) {\n    process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n    this.addQueryListener(queryId, listener);\n    this.fetchQuery(queryId, options).catch(function () {\n      return undefined;\n    });\n    return queryId;\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      variables = _a.variables;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          _this.dataStore.markSubscriptionResult(result, query, variables);\n          _this.broadcastQueries();\n        }\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n        return result;\n      });\n    };\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n    this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n    this.getQuery(queryId).subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n    var _a = observableQuery.options,\n      variables = _a.variables,\n      query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      returnPartialData = _a.returnPartialData;\n    var lastResult = observableQuery.getLastResult();\n    var newData = this.getQuery(observableQuery.queryId).newData;\n    if (newData && newData.complete) {\n      return {\n        data: newData.result,\n        partial: false\n      };\n    }\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return {\n        data: undefined,\n        partial: false\n      };\n    }\n    var _b = this.dataStore.getCache().diff({\n        query: query,\n        variables: variables,\n        previousResult: lastResult ? lastResult.data : undefined,\n        returnPartialData: true,\n        optimistic: optimistic\n      }),\n      result = _b.result,\n      complete = _b.complete;\n    return {\n      data: complete || returnPartialData ? result : void 0,\n      partial: !complete\n    };\n  };\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n      process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      observableQuery = foundObserveableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n    var _a = observableQuery.options,\n      variables = _a.variables,\n      query = _a.query;\n    return {\n      previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n      variables: variables,\n      document: query\n    };\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    var _this = this;\n    this.onBroadcast();\n    this.queries.forEach(function (info, id) {\n      if (info.invalidated) {\n        info.listeners.forEach(function (listener) {\n          if (listener) {\n            listener(_this.queryStore.get(id), info.newData);\n          }\n        });\n      }\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    if (deduplication === void 0) {\n      deduplication = this.queryDeduplication;\n    }\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n    if (serverQuery) {\n      var _a = this,\n        inFlightLinkObservables_1 = _a.inFlightLinkObservables,\n        link = _a.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n          var cleanup = function () {\n            byVariables_1.delete(varJson_1);\n            if (!byVariables_1.size) inFlightLinkObservables_1.delete(serverQuery);\n            cleanupSub_1.unsubscribe();\n          };\n          var cleanupSub_1 = observable.subscribe({\n            next: cleanup,\n            error: cleanup,\n            complete: cleanup\n          });\n        }\n      } else {\n        observable = multiplex(execute(link, operation));\n      }\n    } else {\n      observable = Observable.of({\n        data: {}\n      });\n      context = this.prepareContext(context);\n    }\n    var clientQuery = this.transform(query).clientQuery;\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n    var requestId = _a.requestId,\n      queryId = _a.queryId,\n      document = _a.document,\n      options = _a.options,\n      fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? 'none' : _b,\n      fetchPolicy = options.fetchPolicy;\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      var observable = _this.getObservableFromLink(document, options.context, variables);\n      var fqrfId = \"fetchRequest:\" + queryId;\n      _this.fetchQueryRejectFns.set(fqrfId, reject);\n      var cleanup = function () {\n        _this.fetchQueryRejectFns.delete(fqrfId);\n        _this.setQuery(queryId, function (_a) {\n          var subscriptions = _a.subscriptions;\n          subscriptions.delete(subscription);\n        });\n      };\n      var subscription = observable.map(function (result) {\n        if (requestId >= _this.getQuery(queryId).lastRequestId) {\n          _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n          _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n          _this.invalidate(queryId);\n          _this.invalidate(fetchMoreForQueryId);\n          _this.broadcastQueries();\n        }\n        if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n          return reject(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n        if (errorPolicy === 'all') {\n          errorsFromStore = result.errors;\n        }\n        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n          resultFromStore = result.data;\n        } else {\n          var _a = _this.dataStore.getCache().diff({\n              variables: variables,\n              query: document,\n              optimistic: false,\n              returnPartialData: true\n            }),\n            result_1 = _a.result,\n            complete = _a.complete;\n          if (complete || options.returnPartialData) {\n            resultFromStore = result_1;\n          }\n        }\n      }).subscribe({\n        error: function (error) {\n          cleanup();\n          reject(error);\n        },\n        complete: function () {\n          cleanup();\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false\n          });\n        }\n      });\n      _this.setQuery(queryId, function (_a) {\n        var subscriptions = _a.subscriptions;\n        subscriptions.add(subscription);\n      });\n    });\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    return this.queries.get(queryId) || {\n      listeners: new Set(),\n      invalidated: false,\n      document: null,\n      newData: null,\n      lastRequestId: 1,\n      observableQuery: null,\n      subscriptions: new Set()\n    };\n  };\n  QueryManager.prototype.setQuery = function (queryId, updater) {\n    var prev = this.getQuery(queryId);\n    var newInfo = __assign(__assign({}, prev), updater(prev));\n    this.queries.set(queryId, newInfo);\n  };\n  QueryManager.prototype.invalidate = function (queryId, invalidated) {\n    if (invalidated === void 0) {\n      invalidated = true;\n    }\n    if (queryId) {\n      this.setQuery(queryId, function () {\n        return {\n          invalidated: invalidated\n        };\n      });\n    }\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  QueryManager.prototype.checkInFlight = function (queryId) {\n    var query = this.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n  QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n    var _this = this;\n    var pollInterval = options.pollInterval;\n    process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 18) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n    if (!this.ssrMode) {\n      var info = this.pollingInfoByQueryId.get(queryId);\n      if (!info) {\n        this.pollingInfoByQueryId.set(queryId, info = {});\n      }\n      info.interval = pollInterval;\n      info.options = __assign(__assign({}, options), {\n        fetchPolicy: 'network-only'\n      });\n      var maybeFetch_1 = function () {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          if (_this.checkInFlight(queryId)) {\n            poll_1();\n          } else {\n            _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n          }\n        }\n      };\n      var poll_1 = function () {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          clearTimeout(info.timeout);\n          info.timeout = setTimeout(maybeFetch_1, info.interval);\n        }\n      };\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n      poll_1();\n    }\n    return queryId;\n  };\n  QueryManager.prototype.stopPollingQuery = function (queryId) {\n    this.pollingInfoByQueryId.delete(queryId);\n  };\n  return QueryManager;\n}();\nvar DataStore = function () {\n  function DataStore(initialCache) {\n    this.cache = initialCache;\n  }\n  DataStore.prototype.getCache = function () {\n    return this.cache;\n  };\n  DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n    if (ignoreErrors === void 0) {\n      ignoreErrors = false;\n    }\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n  DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n  DataStore.prototype.markMutationInit = function (mutation) {\n    var _this = this;\n    if (mutation.optimisticResponse) {\n      var optimistic_1;\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic_1 = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic_1 = mutation.optimisticResponse;\n      }\n      this.cache.recordOptimisticTransaction(function (c) {\n        var orig = _this.cache;\n        _this.cache = c;\n        try {\n          _this.markMutationResult({\n            mutationId: mutation.mutationId,\n            result: {\n              data: optimistic_1\n            },\n            document: mutation.document,\n            variables: mutation.variables,\n            updateQueries: mutation.updateQueries,\n            update: mutation.update\n          });\n        } finally {\n          _this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  };\n  DataStore.prototype.markMutationResult = function (mutation) {\n    var _this = this;\n    if (!graphQLResultHasError(mutation.result)) {\n      var cacheWrites_1 = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      }];\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        Object.keys(updateQueries_1).forEach(function (id) {\n          var _a = updateQueries_1[id],\n            query = _a.query,\n            updater = _a.updater;\n          var _b = _this.cache.diff({\n              query: query.document,\n              variables: query.variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _b.result,\n            complete = _b.complete;\n          if (complete) {\n            var nextQueryResult = tryFunctionOrLogError(function () {\n              return updater(currentQueryResult, {\n                mutationResult: mutation.result,\n                queryName: getOperationName(query.document) || undefined,\n                queryVariables: query.variables\n              });\n            });\n            if (nextQueryResult) {\n              cacheWrites_1.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: query.document,\n                variables: query.variables\n              });\n            }\n          }\n        });\n      }\n      this.cache.performTransaction(function (c) {\n        cacheWrites_1.forEach(function (write) {\n          return c.write(write);\n        });\n        var update = mutation.update;\n        if (update) {\n          tryFunctionOrLogError(function () {\n            return update(c, mutation.result);\n          });\n        }\n      });\n    }\n  };\n  DataStore.prototype.markMutationComplete = function (_a) {\n    var mutationId = _a.mutationId,\n      optimisticResponse = _a.optimisticResponse;\n    if (optimisticResponse) {\n      this.cache.removeOptimistic(mutationId);\n    }\n  };\n  DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables: variables,\n      query: document\n    });\n  };\n  DataStore.prototype.reset = function () {\n    return this.cache.reset();\n  };\n  return DataStore;\n}();\nvar version = \"2.6.10\";\nvar hasSuggestedDevtools = false;\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n    this.defaultOptions = {};\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    var cache = options.cache,\n      _a = options.ssrMode,\n      ssrMode = _a === void 0 ? false : _a,\n      _b = options.ssrForceFetchDelay,\n      ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n      connectToDevTools = options.connectToDevTools,\n      _c = options.queryDeduplication,\n      queryDeduplication = _c === void 0 ? true : _c,\n      defaultOptions = options.defaultOptions,\n      _d = options.assumeImmutableResults,\n      assumeImmutableResults = _d === void 0 ? false : _d,\n      resolvers = options.resolvers,\n      typeDefs = options.typeDefs,\n      fragmentMatcher = options.fragmentMatcher,\n      clientAwarenessName = options.name,\n      clientAwarenessVersion = options.version;\n    var link = options.link;\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n    if (!link || !cache) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" + \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" + \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n    }\n    this.link = link;\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n    if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Chrome') > -1) {\n            console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n          }\n        }\n      }\n    }\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: function () {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.queryStore.getStore(),\n              mutations: _this.queryManager.mutationStore.getStore()\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      }\n    });\n  }\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = __assign(__assign({}, this.defaultOptions.watchQuery), options);\n    }\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.watchQuery(options);\n  };\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = __assign(__assign({}, this.defaultOptions.query), options);\n    }\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 5) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.');\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.query(options);\n  };\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = __assign(__assign({}, this.defaultOptions.mutate), options);\n    }\n    return this.queryManager.mutate(options);\n  };\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readQuery(options, optimistic);\n  };\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readFragment(options, optimistic);\n  };\n  ApolloClient.prototype.writeQuery = function (options) {\n    var result = this.cache.writeQuery(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  ApolloClient.prototype.writeFragment = function (options) {\n    var result = this.cache.writeFragment(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  ApolloClient.prototype.writeData = function (options) {\n    var result = this.cache.writeData(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  ApolloClient.prototype.initQueryManager = function () {\n    process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' + 'and it will be removed from ApolloClient in version 3.0.');\n    return this.queryManager;\n  };\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n  return ApolloClient;\n}();\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };","map":{"version":3,"mappings":"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","names":["NetworkStatus","isNetworkRequestInFlight","networkStatus","__extends","Observable","$$observable","LinkObservable","isNonEmptyArray","value","Array","isArray","length","isApolloError","err","hasOwnProperty","generateErrorMessage","message","graphQLErrors","forEach","graphQLError","errorMessage","networkError","replace","_a","extraInfo","_super","_this","__proto__","ApolloError","prototype","Error","FetchType","hasError","storeValue","policy","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","Set","isTornDown","variables","queryId","generateQueryId","opDef","getOperationDefinition","query","queryName","name","ObservableQuery","Promise","resolve","reject","next","result","observers","delete","size","removeQuery","setTimeout","subscription","unsubscribe","error","subscribe","getCurrentResult","data","undefined","lastError","lastResult","loading","partial","queryStoreValue","queryStore","get","isNetworkFetchPolicy","fetchPolicy","errorPolicy","errors","ready","updateLastResult","stale","newResult","snapshot","isEqual","lastResultSnapshot","process","fetchQuery","refetch","fetchMoreOptions","invariant","combinedOptions","__assign","qid","normal","then","updateQuery","previousResult","fetchMoreResult","stopQuery","startGraphQLSubscription","document","subscriptionData","previous","onError","subscriptions","add","opts","pollInterval","startPolling","stopPolling","setVariables","oldFetchPolicy","fetchResults","tryFetch","mapFn","tryFunctionOrLogError","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","assumeImmutableResults","cloneDeep","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","first","setUpQuery","tearDownQuery","addObservableQuery","iterateObserversSafely","observeQuery","isDifferentFromLastResult","previousResult_1","query_1","fetchPolicy_1","transform","hasClientExports","getLocalState","addExportedVariables","previousVariables","serverQuery","catch","clear","removeObservableQuery","method","argument","observersWithMethod","push","obs","obsQuery","MutationStore","store","mutationId","mutation","QueryStore","previousQuery","isSetVariables","metadata","fetchMoreForQueryId","reset","capitalizeFirstLetter","str","charAt","toUpperCase","slice","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","LocalState","mergeDeep","resolverGroup","remoteResult","context","onlyRunForcedResolvers","resolveDocument","localResult","hasDirectives","removeClientSetsFromDocument","newContext","getCacheKey","obj","config","dataIdFromObject","buildRootValueFromCache","prepareContext","exportedVariables","forceResolvers","visit","Directive","enter","node","arguments","some","arg","kind","BREAK","diff","buildQueryFromSelectionSet","returnPartialData","optimistic","rootValue","mainDefinition","getMainDefinition","fragments","getFragmentDefinitions","fragmentMap","createFragmentMap","definitionOperation","operation","defaultOperationType","execContext","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","shouldInclude","isField","resolveField","fieldResult","resultKeyNameFromField","isInlineFragment","fragment","typeCondition","fragmentResult","all","selections","map","mergeDeepArray","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","shouldForceResolvers","resolverType","__typename","resolverMap","argumentsObjectFromField","directives","directive","resolveSubSelectedArray","item","multiplex","inner","sub","complete","asyncMap","observable","activeNextCount","completed","handler","call","e","link","queryDeduplication","_c","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","Map","canUseWeakMap","WeakMap","getCache","QueryManager","queries","_info","stopQueryNoBroadcast","fetchQueryRejectFns","InvariantError","optimisticResponse","updateQueriesByName","refetchQueries","awaitRefetchQueries","updateWithProxyFn","setQuery","getVariables","_f","generateUpdateQueriesInfo","ret","observableQuery","updater","mutationStore","initMutation","markMutationInit","updateQueries","update","self","storeResult","getObservableFromLink","graphQLResultHasError","markMutationResult","markMutationError","markMutationComplete","refetchQueryPromises","refetchQuery","queryOptions","fetchType","isNetworkOnly","needToFetch","shouldFetch","requestId","idCounter","cancel","updateQueryWatch","lastRequestId","invalidated","invalidate","initQuery","storePreviousVariables","isPoll","poll","isRefetch","networkResult","fetchRequest","getQuery","markQueryError","markQueryResultClient","hasForcedResolvers","runResolvers","markQueryResult","newData","invoke","getLastResult","networkStatusChanged","shouldNotifyIfLoading","notifyOnNetworkStatusChange","hasGraphQLErrors","isMissing","getLastError","errorStatusChanged","diffResult","resultFromStore","transformCache","has","transformed","transformDocument","forLink","removeConnectionDirectiveFromDocument","transformForLink","clientQuery","cacheEntry_1","defaultVars","getDefaultValues","doc","set","transformedOptions","watchedQuery","watchQuery","String","stopQueryInStoreNoBroadcast","listener","listeners","watch","callback","resetIds","clearStore","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","addQueryListener","queryListenerForObserver","makeObservable","markSubscriptionResult","observablePromise_1","queryIdOrObservable","foundObserveableQuery","getCurrentQueryResult","info","id","deduplication","inFlightLinkObservables_1","operationName","getOperationName","forceFetch","byVariables_1","varJson_1","JSON","stringify","cleanup","cleanupSub_1","of","errorsFromStore","fqrfId","result_1","prev","newInfo","pollingInfoByQueryId","interval","maybeFetch_1","checkInFlight","poll_1","clearTimeout","timeout","initialCache","DataStore","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","orig","c","cacheWrites_1","updateQueries_1","Object","keys","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","removeOptimistic","version","hasSuggestedDevtools","ssrForceFetchDelay","connectToDevTools","defaultOptions","typeDefs","clientAwarenessName","clientAwarenessVersion","ApolloLink","empty","disableNetworkFetches","bind","mutate","resetStore","defaultConnectToDevTools","env","NODE_ENV","window","__APOLLO_CLIENT__","top","__APOLLO_DEVTOOLS_GLOBAL_HOOK__","navigator","userAgent","indexOf","console","debug","devToolsHookCb","action","state","getStore","mutations","dataWithOptimisticResults","extract","ApolloClient","stop","readQuery","readFragment","writeQuery","writeFragment","writeData","cb","payload","resetStoreCallbacks","clearStoreCallbacks","filter","serializedState","restore","setResolvers","getResolvers"],"sources":["C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\core\\networkStatus.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\util\\Observable.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\util\\arrays.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\errors\\ApolloError.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\core\\types.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\core\\ObservableQuery.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\data\\mutations.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\data\\queries.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\util\\capitalizeFirstLetter.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\core\\LocalState.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\util\\observables.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\core\\QueryManager.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\data\\store.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\version.ts","C:\\Users\\hherenu\\Desktop\\Proyectos\\Portfolio\\node_modules\\src\\ApolloClient.ts"],"sourcesContent":["/**\n * The current status of a query’s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus: NetworkStatus,\n): boolean {\n  return networkStatus < 7;\n}\n","// This simplified polyfill attempts to follow the ECMAScript Observable proposal.\n// See https://github.com/zenparsing/es-observable\nimport { Observable as LinkObservable } from 'apollo-link';\n\nexport type Subscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\n\nimport $$observable from 'symbol-observable';\n\n// rxjs interopt\nexport class Observable<T> extends LinkObservable<T> {\n  public [$$observable]() {\n    return this;\n  }\n\n  public ['@@observable' as any]() {\n    return this;\n  }\n}\n","export function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n","import { GraphQLError } from 'graphql';\nimport { isNonEmptyArray } from '../util/arrays';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach((graphQLError: GraphQLError) => {\n      const errorMessage = graphQLError\n        ? graphQLError.message\n        : 'Error message not found.';\n      message += `GraphQL error: ${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLError>;\n  public networkError: Error | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    networkError?: Error | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      this.message = generateErrorMessage(this);\n    } else {\n      this.message = errorMessage;\n    }\n\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n","import { FetchResult } from 'apollo-link';\nimport { DocumentNode, GraphQLError } from 'graphql';\n\nimport { QueryStoreValue } from '../data/queries';\nimport { NetworkStatus } from './networkStatus';\nimport { Resolver } from './LocalState';\n\nexport type QueryListener = (\n  queryStoreValue: QueryStoreValue,\n  newData?: any,\n  forceResolvers?: boolean,\n) => void;\n\nexport type OperationVariables = { [key: string]: any };\n\nexport type PureQueryOptions = {\n  query: DocumentNode;\n  variables?: { [key: string]: any };\n  context?: any;\n};\n\nexport type ApolloQueryResult<T> = {\n  data: T;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  stale: boolean;\n};\n\nexport enum FetchType {\n  normal = 1,\n  refetch = 2,\n  poll = 3,\n}\n\n// This is part of the public API, people write these functions in `updateQueries`.\nexport type MutationQueryReducer<T> = (\n  previousResult: Record<string, any>,\n  options: {\n    mutationResult: FetchResult<T>;\n    queryName: string | undefined;\n    queryVariables: Record<string, any>;\n  },\n) => Record<string, any>;\n\nexport type MutationQueryReducersMap<T = { [key: string]: any }> = {\n  [queryName: string]: MutationQueryReducer<T>;\n};\n\nexport interface Resolvers {\n  [key: string]: {\n    [ field: string ]: Resolver;\n  };\n}\n","import {\n  isEqual,\n  tryFunctionOrLogError,\n  cloneDeep,\n  getOperationDefinition,\n} from 'apollo-utilities';\nimport { GraphQLError } from 'graphql';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable, Observer, Subscription } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { QueryManager } from './QueryManager';\nimport { ApolloQueryResult, FetchType, OperationVariables } from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ErrorPolicy,\n} from './watchQueryOptions';\n\nimport { QueryStoreValue } from '../data/queries';\n\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isNonEmptyArray } from '../util/arrays';\n\n// XXX remove in the next breaking semver change (3.0)\n// Deprecated, use ApolloCurrentQueryResult\nexport type ApolloCurrentResult<T> = {\n  data: T | {};\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n};\n\nexport type ApolloCurrentQueryResult<T> = {\n  data: T | undefined;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n  stale?: boolean;\n};\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\nexport const hasError = (\n  storeValue: QueryStoreValue,\n  policy: ErrorPolicy = 'none',\n) => storeValue && (\n  storeValue.networkError ||\n  (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors))\n);\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public options: WatchQueryOptions<TVariables>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n  /**\n   *\n   * The current value of the variables for this query. Can change.\n   */\n  public variables: TVariables;\n\n  private shouldSubscribe: boolean;\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<Subscription>();\n\n  private lastResult: ApolloQueryResult<TData>;\n  private lastResultSnapshot: ApolloQueryResult<TData>;\n  private lastError: ApolloError;\n\n  constructor({\n    queryManager,\n    options,\n    shouldSubscribe = true,\n  }: {\n    queryManager: QueryManager<any>;\n    options: WatchQueryOptions<TVariables>;\n    shouldSubscribe?: boolean;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) =>\n      this.onSubscribe(observer),\n    );\n\n    // active state\n    this.isTornDown = false;\n\n    // query information\n    this.options = options;\n    this.variables = options.variables || ({} as TVariables);\n    this.queryId = queryManager.generateQueryId();\n    this.shouldSubscribe = shouldSubscribe;\n\n    const opDef = getOperationDefinition(options.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n\n    // related classes\n    this.queryManager = queryManager;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  // XXX remove in the next breaking semver change (3.0)\n  // Deprecated, use getCurrentResult()\n  public currentResult(): ApolloCurrentResult<TData> {\n    const result = this.getCurrentResult() as ApolloCurrentResult<TData>;\n    if (result.data === undefined) {\n      result.data = {};\n    }\n    return result;\n  }\n\n  /**\n   * Return the result of the query from the local cache as well as some fetching status\n   * `loading` and `networkStatus` allow to know if a request is in flight\n   * `partial` lets you know if the result from the local cache is complete or partial\n   * @return {data: Object, error: ApolloError, loading: boolean, networkStatus: number, partial: boolean}\n   */\n  public getCurrentResult(): ApolloCurrentQueryResult<TData> {\n    if (this.isTornDown) {\n      const { lastResult } = this;\n      return {\n        data: !this.lastError && lastResult && lastResult.data || void 0,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error,\n      };\n    }\n\n    const { data, partial } = this.queryManager.getCurrentQueryResult(this);\n    const queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n    let result: ApolloQueryResult<TData>;\n\n    const { fetchPolicy } = this.options;\n\n    const isNetworkFetchPolicy =\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache';\n\n    if (queryStoreValue) {\n      const { networkStatus } = queryStoreValue;\n\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return {\n          data: void 0,\n          loading: false,\n          networkStatus,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError,\n          }),\n        };\n      }\n\n      // Variables might have been added dynamically at query time, when\n      // using `@client @export(as: \"varname\")` for example. When this happens,\n      // the variables have been updated in the query store, but not updated on\n      // the original `ObservableQuery`. We'll update the observable query\n      // variables here to match, so retrieving from the cache doesn't fail.\n      if (queryStoreValue.variables) {\n        this.options.variables = {\n          ...this.options.variables,\n          ...(queryStoreValue.variables as TVariables),\n        };\n        this.variables = this.options.variables;\n      }\n\n      result = {\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n      } as ApolloQueryResult<TData>;\n\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n\n    } else {\n      // We need to be careful about the loading state we show to the user, to try\n      // and be vaguely in line with what the user would have seen from .subscribe()\n      // but to still provide useful information synchronously when the query\n      // will not end up hitting the server.\n      // See more: https://github.com/apollostack/apollo-client/issues/707\n      // Basically: is there a query in flight right now (modolo the next tick)?\n      const loading = isNetworkFetchPolicy ||\n        (partial && fetchPolicy !== 'cache-only');\n\n      result = {\n        data,\n        loading,\n        networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n      } as ApolloQueryResult<TData>;\n    }\n\n    if (!partial) {\n      this.updateLastResult({ ...result, stale: false });\n    }\n\n    return { ...result, partial };\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    const { lastResultSnapshot: snapshot } = this;\n    return !(\n      snapshot &&\n      newResult &&\n      snapshot.networkStatus === newResult.networkStatus &&\n      snapshot.stale === newResult.stale &&\n      isEqual(snapshot.data, newResult.data)\n    );\n  }\n\n  // Returns the last result that observer.next was called with. This is not the same as\n  // getCurrentResult! If you're not sure which you need, then you probably need getCurrentResult.\n  public getLastResult(): ApolloQueryResult<TData> {\n    return this.lastResult;\n  }\n\n  public getLastError(): ApolloError {\n    return this.lastError;\n  }\n\n  public resetLastResults(): void {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    const queryStore = this.queryManager.queryStore.get(this.queryId);\n    if (queryStore) {\n      queryStore.networkError = null;\n      queryStore.graphQLErrors = [];\n    }\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: TVariables): Promise<ApolloQueryResult<TData>> {\n    let { fetchPolicy } = this.options;\n    // early return if trying to read from cache during refetch\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(new InvariantError(\n        'cache-only fetchPolicy option should not be used together with query refetch.',\n      ));\n    }\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    if (fetchPolicy !== 'no-cache' &&\n        fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      // update observable variables\n      this.variables = {\n        ...this.variables,\n        ...variables,\n      };\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      // Update the existing options with new variables\n      this.options.variables = {\n        ...this.options.variables,\n        ...this.variables,\n      };\n    }\n\n    return this.queryManager.fetchQuery(\n      this.queryId,\n      { ...this.options, fetchPolicy },\n      FetchType.refetch,\n    ) as Promise<ApolloQueryResult<TData>>;\n  }\n\n  public fetchMore<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>,\n  ): Promise<ApolloQueryResult<TData>> {\n    // early return if no update Query\n    invariant(\n      fetchMoreOptions.updateQuery,\n      'updateQuery option is required. This function defines how to update the query data with the new results.',\n    );\n\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      fetchPolicy: 'network-only',\n    } as WatchQueryOptions;\n\n    const qid = this.queryManager.generateQueryId();\n\n    return this.queryManager\n      .fetchQuery(\n        qid,\n        combinedOptions,\n        FetchType.normal,\n        this.queryId,\n      )\n      .then(\n        fetchMoreResult => {\n          this.updateQuery((previousResult: any) =>\n            fetchMoreOptions.updateQuery(previousResult, {\n              fetchMoreResult: fetchMoreResult.data as TData,\n              variables: combinedOptions.variables as TVariables,\n            }),\n          );\n          this.queryManager.stopQuery(qid);\n          return fetchMoreResult as ApolloQueryResult<TData>;\n        },\n        error => {\n          this.queryManager.stopQuery(qid);\n          throw error;\n        },\n      );\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  // Note: if the query is not active (there are no subscribers), the promise\n  // will return null immediately.\n  public setOptions(\n    opts: WatchQueryOptions,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    const { fetchPolicy: oldFetchPolicy } = this.options;\n    this.options = {\n      ...this.options,\n      ...opts,\n    } as WatchQueryOptions<TVariables>;\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    const { fetchPolicy } = opts;\n\n    return this.setVariables(\n      this.options.variables as TVariables,\n      // Try to fetch the query if fetchPolicy changed from either cache-only\n      // or standby to something else, or changed to network-only.\n      oldFetchPolicy !== fetchPolicy && (\n        oldFetchPolicy === 'cache-only' ||\n        oldFetchPolicy === 'standby' ||\n        fetchPolicy === 'network-only'\n      ),\n      opts.fetchResults,\n    );\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   *\n   * @param tryFetch: Try and fetch new results even if the variables haven't\n   * changed (we may still just hit the store, but if there's nothing in there\n   * this will refetch)\n   *\n   * @param fetchResults: Option to ignore fetching results when updating variables\n   */\n  public setVariables(\n    variables: TVariables,\n    tryFetch: boolean = false,\n    fetchResults = true,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    // since setVariables restarts the subscription, we reset the tornDown status\n    this.isTornDown = false;\n\n    variables = variables || this.variables;\n\n    if (!tryFetch && isEqual(variables, this.variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size && fetchResults\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.variables = this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    // Use the same options as before, but with new variables\n    return this.queryManager.fetchQuery(\n      this.queryId,\n      this.options,\n    ) as Promise<ApolloQueryResult<TData>>;\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const {\n      previousResult,\n      variables,\n      document,\n    } = queryManager.getQueryWithPreviousResult<TData, TVars>(\n      this.queryId,\n    );\n\n    const newResult = tryFunctionOrLogError(() =>\n      mapFn(previousResult, { variables }),\n    );\n\n    if (newResult) {\n      queryManager.dataStore.markUpdateQueryResult(\n        document,\n        variables,\n        newResult,\n      );\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public stopPolling() {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  }\n\n  public startPolling(pollInterval: number) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  }\n\n  private updateLastResult(newResult: ApolloQueryResult<TData>) {\n    const previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n      ? newResult\n      : cloneDeep(newResult);\n    return previousResult;\n  }\n\n  private onSubscribe(observer: Observer<ApolloQueryResult<TData>>) {\n    // Zen Observable has its own error function, so in order to log correctly\n    // we need to provide a custom error callback.\n    try {\n      var subObserver = (observer as any)._subscription._observer;\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch {}\n\n    const first = !this.observers.size;\n    this.observers.add(observer);\n\n    // Deliver initial result\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n\n    // setup the query if it hasn't been done before\n    if (first) {\n      this.setUpQuery();\n    }\n\n    return () => {\n      if (this.observers.delete(observer) && !this.observers.size) {\n        this.tearDownQuery();\n      }\n    };\n  }\n\n  private setUpQuery() {\n    const { queryManager, queryId } = this;\n\n    if (this.shouldSubscribe) {\n      queryManager.addObservableQuery<TData>(queryId, this);\n    }\n\n    if (this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      queryManager.startPollingQuery(this.options, queryId);\n    }\n\n    const onError = (error: ApolloError) => {\n      // Since we don't get the current result on errors, only the error, we\n      // must mirror the updates that occur in QueryStore.markQueryError here\n      this.updateLastResult({\n        ...this.lastResult,\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false,\n      });\n      iterateObserversSafely(this.observers, 'error', this.lastError = error);\n    };\n\n    queryManager.observeQuery<TData>(queryId, this.options, {\n      next: (result: ApolloQueryResult<TData>) => {\n        if (this.lastError || this.isDifferentFromLastResult(result)) {\n          const previousResult = this.updateLastResult(result);\n          const { query, variables, fetchPolicy } = this.options;\n\n          // Before calling `next` on each observer, we need to first see if\n          // the query is using `@client @export` directives, and update\n          // any variables that might have changed. If `@export` variables have\n          // changed, and the query is calling against both local and remote\n          // data, a refetch is needed to pull in new data, using the\n          // updated `@export` variables.\n          if (queryManager.transform(query).hasClientExports) {\n            queryManager.getLocalState().addExportedVariables(\n              query,\n              variables,\n            ).then((variables: TVariables) => {\n              const previousVariables = this.variables;\n              this.variables = this.options.variables = variables;\n              if (\n                !result.loading &&\n                previousResult &&\n                fetchPolicy !== 'cache-only' &&\n                queryManager.transform(query).serverQuery &&\n                !isEqual(previousVariables, variables)\n              ) {\n                this.refetch();\n              } else {\n                iterateObserversSafely(this.observers, 'next', result);\n              }\n            });\n          } else {\n            iterateObserversSafely(this.observers, 'next', result);\n          }\n        }\n      },\n      error: onError,\n    }).catch(onError);\n  }\n\n  private tearDownQuery() {\n    const { queryManager } = this;\n\n    this.isTornDown = true;\n    queryManager.stopPollingQuery(this.queryId);\n\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n\n    queryManager.removeObservableQuery(this.queryId);\n    queryManager.stopQuery(this.queryId);\n\n    this.observers.clear();\n  }\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nfunction iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n\nfunction assertNotCacheFirstOrOnly<TData, TVariables>(\n  obsQuery: ObservableQuery<TData, TVariables>,\n) {\n  const { fetchPolicy } = obsQuery.options;\n  invariant(\n    fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only',\n    'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.',\n  );\n}\n","import { DocumentNode } from 'graphql';\n\nexport class MutationStore {\n  private store: { [mutationId: string]: MutationStoreValue } = {};\n\n  public getStore(): { [mutationId: string]: MutationStoreValue } {\n    return this.store;\n  }\n\n  public get(mutationId: string): MutationStoreValue {\n    return this.store[mutationId];\n  }\n\n  public initMutation(\n    mutationId: string,\n    mutation: DocumentNode,\n    variables: Object | undefined,\n  ) {\n    this.store[mutationId] = {\n      mutation,\n      variables: variables || {},\n      loading: true,\n      error: null,\n    };\n  }\n\n  public markMutationError(mutationId: string, error: Error) {\n    const mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = error;\n    }\n  }\n\n  public markMutationResult(mutationId: string) {\n    const mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = null;\n    }\n  }\n\n  public reset() {\n    this.store = {};\n  }\n}\n\nexport interface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Object;\n  loading: boolean;\n  error: Error | null;\n}\n","import { DocumentNode, GraphQLError, ExecutionResult } from 'graphql';\nimport { isEqual } from 'apollo-utilities';\nimport { invariant } from 'ts-invariant';\nimport { NetworkStatus } from '../core/networkStatus';\nimport { isNonEmptyArray } from '../util/arrays';\n\nexport type QueryStoreValue = {\n  document: DocumentNode;\n  variables: Object;\n  previousVariables?: Object | null;\n  networkStatus: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  metadata: any;\n};\n\nexport class QueryStore {\n  private store: { [queryId: string]: QueryStoreValue } = {};\n\n  public getStore(): { [queryId: string]: QueryStoreValue } {\n    return this.store;\n  }\n\n  public get(queryId: string): QueryStoreValue {\n    return this.store[queryId];\n  }\n\n  public initQuery(query: {\n    queryId: string;\n    document: DocumentNode;\n    storePreviousVariables: boolean;\n    variables: Object;\n    isPoll: boolean;\n    isRefetch: boolean;\n    metadata: any;\n    fetchMoreForQueryId: string | undefined;\n  }) {\n    const previousQuery = this.store[query.queryId];\n\n    // XXX we're throwing an error here to catch bugs where a query gets overwritten by a new one.\n    // we should implement a separate action for refetching so that QUERY_INIT may never overwrite\n    // an existing query (see also: https://github.com/apollostack/apollo-client/issues/732)\n    invariant(\n      !previousQuery ||\n      previousQuery.document === query.document ||\n      isEqual(previousQuery.document, query.document),\n      'Internal Error: may not update existing query string in store',\n    );\n\n    let isSetVariables = false;\n\n    let previousVariables: Object | null = null;\n    if (\n      query.storePreviousVariables &&\n      previousQuery &&\n      previousQuery.networkStatus !== NetworkStatus.loading\n      // if the previous query was still loading, we don't want to remember it at all.\n    ) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    // TODO break this out into a separate function\n    let networkStatus;\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n      // TODO: can we determine setVariables here if it's a refetch and the variables have changed?\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    let graphQLErrors: ReadonlyArray<GraphQLError> = [];\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    // XXX right now if QUERY_INIT is fired twice, like in a refetch situation, we just overwrite\n    // the store. We probably want a refetch action instead, because I suspect that if you refetch\n    // before the initial fetch is done, you'll get an error.\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus,\n      metadata: query.metadata,\n    };\n\n    // If the action had a `moreForQueryId` property then we need to set the\n    // network status on that query as well to `fetchMore`.\n    //\n    // We have a complement to this if statement in the query result and query\n    // error action branch, but importantly *not* in the client result branch.\n    // This is because the implementation of `fetchMore` *always* sets\n    // `fetchPolicy` to `network-only` so we would never have a client result.\n    if (\n      typeof query.fetchMoreForQueryId === 'string' &&\n      this.store[query.fetchMoreForQueryId]\n    ) {\n      this.store[query.fetchMoreForQueryId].networkStatus =\n        NetworkStatus.fetchMore;\n    }\n  }\n\n  public markQueryResult(\n    queryId: string,\n    result: ExecutionResult,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (\n      typeof fetchMoreForQueryId === 'string' &&\n      this.store[fetchMoreForQueryId]\n    ) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  }\n\n  public markQueryError(\n    queryId: string,\n    error: Error,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  }\n\n  public markQueryResultClient(queryId: string, complete: boolean) {\n    const storeValue = this.store && this.store[queryId];\n    if (storeValue) {\n      storeValue.networkError = null;\n      storeValue.previousVariables = null;\n      if (complete) {\n        storeValue.networkStatus = NetworkStatus.ready;\n      }\n    }\n  }\n\n  public stopQuery(queryId: string) {\n    delete this.store[queryId];\n  }\n\n  public reset(observableQueryIds: string[]) {\n    Object.keys(this.store).forEach(queryId => {\n      if (observableQueryIds.indexOf(queryId) < 0) {\n        this.stopQuery(queryId);\n      } else {\n        // XXX set loading to true so listeners don't trigger unless they want results with partial data\n        this.store[queryId].networkStatus = NetworkStatus.loading;\n      }\n    });\n  }\n}\n","export function capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n","import {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n} from 'graphql';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nimport { ApolloCache } from 'apollo-cache';\nimport {\n  getMainDefinition,\n  buildQueryFromSelectionSet,\n  hasDirectives,\n  removeClientSetsFromDocument,\n  mergeDeep,\n  mergeDeepArray,\n  FragmentMap,\n  argumentsObjectFromField,\n  resultKeyNameFromField,\n  getFragmentDefinitions,\n  createFragmentMap,\n  shouldInclude,\n  isField,\n  isInlineFragment,\n} from 'apollo-utilities';\nimport { FetchResult } from 'apollo-link';\n\nimport { invariant } from 'ts-invariant';\n\nimport ApolloClient from '../ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { capitalizeFirstLetter } from '../util/capitalizeFirstLetter';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n      invariant.warn(\n        'Found @client directives in a query but no ApolloClient resolvers ' +\n        'were specified. This means ApolloClient local resolver handling ' +\n        'has been disabled, and @client directives will be passed through ' +\n        'to your link chain.',\n      );\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  }\n\n  public prepareContext(context = {}) {\n    const { cache } = this;\n\n    const newContext = {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey: (obj: { __typename: string; id: string | number }) => {\n        if ((cache as any).config) {\n          return (cache as any).config.dataIdFromObject(obj);\n        } else {\n          invariant(false,\n            'To use context.getCacheKey, you need to use a cache that has ' +\n              'a configurable dataIdFromObject, like apollo-cache-inmemory.',\n          );\n        }\n      },\n    };\n\n    return newContext;\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? capitalizeFirstLetter(definitionOperation)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(resolve(\n            rootValue,\n            argumentsObjectFromField(field, variables),\n            execContext.context,\n            { field, fragmentMap: execContext.fragmentMap },\n          ));\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n","import { Observable, Observer, Subscription } from './Observable';\n\n// Returns a normal Observable that can have any number of subscribers,\n// while ensuring the original Observable gets subscribed to at most once.\nexport function multiplex<T>(inner: Observable<T>): Observable<T> {\n  const observers = new Set<Observer<T>>();\n  let sub: Subscription | null = null;\n  return new Observable<T>(observer => {\n    observers.add(observer);\n    sub = sub || inner.subscribe({\n      next(value) {\n        observers.forEach(obs => obs.next && obs.next(value));\n      },\n      error(error) {\n        observers.forEach(obs => obs.error && obs.error(error));\n      },\n      complete() {\n        observers.forEach(obs => obs.complete && obs.complete());\n      },\n    });\n    return () => {\n      if (observers.delete(observer) && !observers.size && sub) {\n        sub.unsubscribe();\n        sub = null;\n      }\n    };\n  });\n}\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | Promise<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeNextCount = 0;\n    let completed = false;\n\n    const handler: Observer<V> = {\n      next(value) {\n        ++activeNextCount;\n        new Promise(resolve => {\n          resolve(mapFn(value));\n        }).then(\n          result => {\n            --activeNextCount;\n            next && next.call(observer, result);\n            completed && handler.complete!();\n          },\n          e => {\n            --activeNextCount;\n            error && error.call(observer, e);\n          },\n        );\n      },\n      error(e) {\n        error && error.call(observer, e);\n      },\n      complete() {\n        completed = true;\n        if (!activeNextCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n","import { execute, ApolloLink, FetchResult } from 'apollo-link';\nimport { DocumentNode } from 'graphql';\nimport { Cache } from 'apollo-cache';\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasDirectives,\n  graphQLResultHasError,\n  hasClientExports,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n} from 'apollo-utilities';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observer, Subscription, Observable } from '../util/Observable';\nimport { QueryWithUpdater, DataStore } from '../data/store';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore, QueryStoreValue } from '../data/queries';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  QueryListener,\n  ApolloQueryResult,\n  FetchType,\n  OperationVariables,\n} from './types';\nimport { LocalState } from './LocalState';\nimport { asyncMap, multiplex } from '../util/observables';\nimport { isNonEmptyArray } from '../util/arrays';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport interface QueryInfo {\n  listeners: Set<QueryListener>;\n  invalidated: boolean;\n  newData: Cache.DiffResult<any> | null;\n  document: DocumentNode | null;\n  lastRequestId: number;\n  // A map going from queryId to an observer for a query issued by watchQuery. We use\n  // these to keep track of queries that are inflight and error on the observers associated\n  // with them in case of some destabalizing action (e.g. reset of the Apollo store).\n  observableQuery: ObservableQuery<any> | null;\n  subscriptions: Set<Subscription>;\n  cancel?: () => void;\n}\n\nexport class QueryManager<TStore> {\n  public link: ApolloLink;\n  public mutationStore: MutationStore = new MutationStore();\n  public queryStore: QueryStore = new QueryStore();\n  public dataStore: DataStore<TStore>;\n  public readonly assumeImmutableResults: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast: () => void;\n\n  private ssrMode: boolean;\n\n  // let's not start at zero to avoid pain with bad checks\n  private idCounter = 1;\n\n  // XXX merge with ObservableQuery but that needs to be expanded to support mutations and\n  // subscriptions as well\n  private queries: Map<string, QueryInfo> = new Map();\n\n  // A map of Promise reject functions for fetchQuery promises that have not\n  // yet been resolved, used to keep track of in-flight queries so that we can\n  // reject them in case a destabilizing event occurs (e.g. Apollo store reset).\n  // The key is in the format of `query:${queryId}` or `fetchRequest:${queryId}`,\n  // depending on where the promise's rejection function was created from.\n  private fetchQueryRejectFns = new Map<string, Function>();\n\n  constructor({\n    link,\n    queryDeduplication = false,\n    store,\n    onBroadcast = () => undefined,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    store: DataStore<TStore>;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache: store.getCache() });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(\n        new InvariantError('QueryManager stopped while query was in flight'),\n      );\n    });\n  }\n\n  public async mutate<T>({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries: updateQueriesByName,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    errorPolicy = 'none',\n    fetchPolicy,\n    context = {},\n  }: MutationOptions): Promise<FetchResult<T>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      !fetchPolicy || fetchPolicy === 'no-cache',\n      \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\"\n    );\n\n    const mutationId = this.generateQueryId();\n    mutation = this.transform(mutation).document;\n\n    this.setQuery(mutationId, () => ({ document: mutation }));\n\n    variables = this.getVariables(mutation, variables);\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context);\n    }\n\n    // Create a map of update queries by id to the query instead of by name.\n    const generateUpdateQueriesInfo: () => {\n      [queryId: string]: QueryWithUpdater;\n    } = () => {\n      const ret: { [queryId: string]: QueryWithUpdater } = {};\n\n      if (updateQueriesByName) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          if (observableQuery) {\n            const { queryName } = observableQuery;\n            if (\n              queryName &&\n              hasOwnProperty.call(updateQueriesByName, queryName)\n            ) {\n              ret[queryId] = {\n                updater: updateQueriesByName[queryName],\n                query: this.queryStore.get(queryId),\n              };\n            }\n          }\n        });\n      }\n\n      return ret;\n    };\n\n    this.mutationStore.initMutation(\n      mutationId,\n      mutation,\n      variables,\n    );\n\n    this.dataStore.markMutationInit({\n      mutationId,\n      document: mutation,\n      variables,\n      updateQueries: generateUpdateQueriesInfo(),\n      update: updateWithProxyFn,\n      optimisticResponse,\n    });\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      let storeResult: FetchResult<T> | null;\n      let error: ApolloError;\n\n      self.getObservableFromLink(\n        mutation,\n        {\n          ...context,\n          optimisticResponse,\n        },\n        variables,\n        false,\n      ).subscribe({\n        next(result: FetchResult<T>) {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            error = new ApolloError({\n              graphQLErrors: result.errors,\n            });\n            return;\n          }\n\n          self.mutationStore.markMutationResult(mutationId);\n\n          if (fetchPolicy !== 'no-cache') {\n            self.dataStore.markMutationResult({\n              mutationId,\n              result,\n              document: mutation,\n              variables,\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n            });\n          }\n\n          storeResult = result;\n        },\n\n        error(err: Error) {\n          self.mutationStore.markMutationError(mutationId, err);\n          self.dataStore.markMutationComplete({\n            mutationId,\n            optimisticResponse,\n          });\n          self.broadcastQueries();\n          self.setQuery(mutationId, () => ({ document: null }));\n          reject(\n            new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n\n        complete() {\n          if (error) {\n            self.mutationStore.markMutationError(mutationId, error);\n          }\n\n          self.dataStore.markMutationComplete({\n            mutationId,\n            optimisticResponse,\n          });\n\n          self.broadcastQueries();\n\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          // allow for conditional refetches\n          // XXX do we want to make this the only API one day?\n          if (typeof refetchQueries === 'function') {\n            refetchQueries = refetchQueries(storeResult!);\n          }\n\n          const refetchQueryPromises: Promise<\n            ApolloQueryResult<any>[] | ApolloQueryResult<{}>\n          >[] = [];\n\n          if (isNonEmptyArray(refetchQueries)) {\n            refetchQueries.forEach(refetchQuery => {\n              if (typeof refetchQuery === 'string') {\n                self.queries.forEach(({ observableQuery }) => {\n                  if (\n                    observableQuery &&\n                    observableQuery.queryName === refetchQuery\n                  ) {\n                    refetchQueryPromises.push(observableQuery.refetch());\n                  }\n                });\n              } else {\n                const queryOptions: QueryOptions = {\n                  query: refetchQuery.query,\n                  variables: refetchQuery.variables,\n                  fetchPolicy: 'network-only',\n                };\n\n                if (refetchQuery.context) {\n                  queryOptions.context = refetchQuery.context;\n                }\n\n                refetchQueryPromises.push(self.query(queryOptions));\n              }\n            });\n          }\n\n          Promise.all(\n            awaitRefetchQueries ? refetchQueryPromises : [],\n          ).then(() => {\n            self.setQuery(mutationId, () => ({ document: null }));\n\n            if (\n              errorPolicy === 'ignore' &&\n              storeResult &&\n              graphQLResultHasError(storeResult)\n            ) {\n              delete storeResult.errors;\n            }\n\n            resolve(storeResult!);\n          });\n        },\n      });\n    });\n  }\n\n  public async fetchQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    fetchType?: FetchType,\n    // This allows us to track if this is a query spawned by a `fetchMore`\n    // call for another query. We need this data to compute the `fetchMore`\n    // network status for the query this is fetching for.\n    fetchMoreForQueryId?: string,\n  ): Promise<FetchResult<T>> {\n    const {\n      metadata = null,\n      fetchPolicy = 'cache-first', // cache-first is the default fetch policy.\n      context = {},\n    } = options;\n\n    const query = this.transform(options.query).document;\n\n    let variables = this.getVariables(query, options.variables);\n\n    if (this.transform(query).hasClientExports) {\n      variables = await this.localState.addExportedVariables(query, variables, context);\n    }\n\n    options = { ...options, variables };\n\n    let storeResult: any;\n    const isNetworkOnly =\n      fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    let needToFetch = isNetworkOnly;\n\n    // Unless we are completely skipping the cache, we want to diff the query\n    // against the cache before we fetch it from the network interface.\n    if (!isNetworkOnly) {\n      const { complete, result } = this.dataStore.getCache().diff({\n        query,\n        variables,\n        returnPartialData: true,\n        optimistic: false,\n      });\n\n      // If we're in here, only fetch if we have missing fields\n      needToFetch = !complete || fetchPolicy === 'cache-and-network';\n      storeResult = result;\n    }\n\n    let shouldFetch =\n      needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n\n    // we need to check to see if this is an operation that uses the @live directive\n    if (hasDirectives(['live'], query)) shouldFetch = true;\n\n    const requestId = this.idCounter++;\n\n    // set up a watcher to listen to cache updates\n    const cancel = fetchPolicy !== 'no-cache'\n      ? this.updateQueryWatch(queryId, query, options)\n      : undefined;\n\n    // Initialize query in store with unique requestId\n    this.setQuery(queryId, () => ({\n      document: query,\n      lastRequestId: requestId,\n      invalidated: true,\n      cancel,\n    }));\n\n    this.invalidate(fetchMoreForQueryId);\n\n    this.queryStore.initQuery({\n      queryId,\n      document: query,\n      storePreviousVariables: shouldFetch,\n      variables,\n      isPoll: fetchType === FetchType.poll,\n      isRefetch: fetchType === FetchType.refetch,\n      metadata,\n      fetchMoreForQueryId,\n    });\n\n    this.broadcastQueries();\n\n    if (shouldFetch) {\n      const networkResult = this.fetchRequest<T>({\n        requestId,\n        queryId,\n        document: query,\n        options,\n        fetchMoreForQueryId,\n      }).catch(error => {\n        // This is for the benefit of `refetch` promises, which currently don't get their errors\n        // through the store like watchQuery observers do\n        if (isApolloError(error)) {\n          throw error;\n        } else {\n          if (requestId >= this.getQuery(queryId).lastRequestId) {\n            this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n            this.invalidate(queryId);\n            this.invalidate(fetchMoreForQueryId);\n            this.broadcastQueries();\n          }\n          throw new ApolloError({ networkError: error });\n        }\n      });\n\n      // we don't return the promise for cache-and-network since it is already\n      // returned below from the cache\n      if (fetchPolicy !== 'cache-and-network') {\n        return networkResult;\n      }\n\n      // however we need to catch the error so it isn't unhandled in case of\n      // network error\n      networkResult.catch(() => {});\n    }\n\n    // If there is no part of the query we need to fetch from the server (or,\n    // fetchPolicy is cache-only), we just write the store result as the final result.\n    this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n    this.invalidate(queryId);\n    this.invalidate(fetchMoreForQueryId);\n\n    if (this.transform(query).hasForcedResolvers) {\n      return this.localState.runResolvers({\n        document: query,\n        remoteResult: { data: storeResult },\n        context,\n        variables,\n        onlyRunForcedResolvers: true,\n      }).then((result: FetchResult<T>) => {\n        this.markQueryResult(\n          queryId,\n          result,\n          options,\n          fetchMoreForQueryId,\n        );\n        this.broadcastQueries();\n        return result;\n      });\n    }\n\n    this.broadcastQueries();\n\n    // If we have no query to send to the server, we should return the result\n    // found within the store.\n    return { data: storeResult };\n  }\n\n  private markQueryResult<TData>(\n    queryId: string,\n    result: FetchResult<TData>,\n    {\n      fetchPolicy,\n      variables,\n      errorPolicy,\n    }: WatchQueryOptions,\n    fetchMoreForQueryId?: string,\n  ) {\n    if (fetchPolicy === 'no-cache') {\n      this.setQuery(queryId, () => ({\n        newData: { result: result.data, complete: true },\n      }));\n    } else {\n      this.dataStore.markQueryResult(\n        result,\n        this.getQuery(queryId).document!,\n        variables,\n        fetchMoreForQueryId,\n        errorPolicy === 'ignore' || errorPolicy === 'all',\n      );\n    }\n  }\n\n  // Returns a query listener that will update the given observer based on the\n  // results (or lack thereof) for a particular query.\n  public queryListenerForObserver<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    observer: Observer<ApolloQueryResult<T>>,\n  ): QueryListener {\n    function invoke(method: 'next' | 'error', argument: any) {\n      if (observer[method]) {\n        try {\n          observer[method]!(argument);\n        } catch (e) {\n          invariant.error(e);\n        }\n      } else if (method === 'error') {\n        invariant.error(argument);\n      }\n    }\n\n    return (\n      queryStoreValue: QueryStoreValue,\n      newData?: Cache.DiffResult<T>,\n    ) => {\n      // we're going to take a look at the data, so the query is no longer invalidated\n      this.invalidate(queryId, false);\n\n      // The query store value can be undefined in the event of a store\n      // reset.\n      if (!queryStoreValue) return;\n\n      const { observableQuery, document } = this.getQuery(queryId);\n\n      const fetchPolicy = observableQuery\n        ? observableQuery.options.fetchPolicy\n        : options.fetchPolicy;\n\n      // don't watch the store for queries on standby\n      if (fetchPolicy === 'standby') return;\n\n      const loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n      const lastResult = observableQuery && observableQuery.getLastResult();\n\n      const networkStatusChanged = !!(\n        lastResult &&\n        lastResult.networkStatus !== queryStoreValue.networkStatus\n      );\n\n      const shouldNotifyIfLoading =\n        options.returnPartialData ||\n        (!newData && queryStoreValue.previousVariables) ||\n        (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n        fetchPolicy === 'cache-only' ||\n        fetchPolicy === 'cache-and-network';\n\n      if (loading && !shouldNotifyIfLoading) {\n        return;\n      }\n\n      const hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n\n      const errorPolicy: ErrorPolicy = observableQuery\n        && observableQuery.options.errorPolicy\n        || options.errorPolicy\n        || 'none';\n\n      // If we have either a GraphQL error or a network error, we create\n      // an error and tell the observer about it.\n      if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n        return invoke('error', new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError,\n        }));\n      }\n\n      try {\n        let data: any;\n        let isMissing: boolean;\n\n        if (newData) {\n          // As long as we're using the cache, clear out the latest\n          // `newData`, since it will now become the current data. We need\n          // to keep the `newData` stored with the query when using\n          // `no-cache` since `getCurrentQueryResult` attemps to pull from\n          // `newData` first, following by trying the cache (which won't\n          // find a hit for `no-cache`).\n          if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n            this.setQuery(queryId, () => ({ newData: null }));\n          }\n\n          data = newData.result;\n          isMissing = !newData.complete;\n        } else {\n          const lastError = observableQuery && observableQuery.getLastError();\n          const errorStatusChanged =\n            errorPolicy !== 'none' &&\n            (lastError && lastError.graphQLErrors) !==\n              queryStoreValue.graphQLErrors;\n\n          if (lastResult && lastResult.data && !errorStatusChanged) {\n            data = lastResult.data;\n            isMissing = false;\n          } else {\n            const diffResult = this.dataStore.getCache().diff({\n              query: document as DocumentNode,\n              variables:\n                queryStoreValue.previousVariables ||\n                queryStoreValue.variables,\n              returnPartialData: true,\n              optimistic: true,\n            });\n\n            data = diffResult.result;\n            isMissing = !diffResult.complete;\n          }\n        }\n\n        // If there is some data missing and the user has told us that they\n        // do not tolerate partial data then we want to return the previous\n        // result and mark it as stale.\n        const stale = isMissing && !(\n          options.returnPartialData ||\n          fetchPolicy === 'cache-only'\n        );\n\n        const resultFromStore: ApolloQueryResult<T> = {\n          data: stale ? lastResult && lastResult.data : data,\n          loading,\n          networkStatus: queryStoreValue.networkStatus,\n          stale,\n        };\n\n        // if the query wants updates on errors we need to add it to the result\n        if (errorPolicy === 'all' && hasGraphQLErrors) {\n          resultFromStore.errors = queryStoreValue.graphQLErrors;\n        }\n\n        invoke('next', resultFromStore);\n\n      } catch (networkError) {\n        invoke('error', new ApolloError({ networkError }));\n      }\n    };\n  }\n\n  private transformCache = new (canUseWeakMap ? WeakMap : Map)<\n    DocumentNode,\n    Readonly<{\n      document: Readonly<DocumentNode>;\n      hasClientExports: boolean;\n      hasForcedResolvers: boolean;\n      clientQuery: Readonly<DocumentNode> | null;\n      serverQuery: Readonly<DocumentNode> | null;\n      defaultVars: Readonly<OperationVariables>;\n    }>\n  >();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cache = this.dataStore.getCache();\n      const transformed = cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = this.localState.serverQuery(forLink);\n\n      const cacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables(\n    document: DocumentNode,\n    variables?: OperationVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  // The shouldSubscribe option is a temporary fix that tells us whether watchQuery was called\n  // directly (i.e. through ApolloClient) or through the query method within QueryManager.\n  // Currently, the query method uses watchQuery in order to handle non-network errors correctly\n  // but we don't want to keep track observables issued for the query method since those aren't\n  // supposed to be refetched in the event of a store reset. Once we unify error handling for\n  // network errors and non-network errors, the shouldSubscribe option will go away.\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions,\n    shouldSubscribe = true,\n  ): ObservableQuery<T, TVariables> {\n    invariant(\n      options.fetchPolicy !== 'standby',\n      'client.watchQuery cannot be called with fetchPolicy set to \"standby\"',\n    );\n\n    // assign variable default values if supplied\n    options.variables = this.getVariables(options.query, options.variables);\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    let transformedOptions = { ...options } as WatchQueryOptions<TVariables>;\n\n    return new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe,\n    });\n  }\n\n  public query<T>(options: QueryOptions): Promise<ApolloQueryResult<T>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      const watchedQuery = this.watchQuery<T>(options, false);\n      this.fetchQueryRejectFns.set(`query:${watchedQuery.queryId}`, reject);\n      watchedQuery\n        .result()\n        .then(resolve, reject)\n        // Since neither resolve nor reject throw or return a value, this .then\n        // handler is guaranteed to execute. Note that it doesn't really matter\n        // when we remove the reject function from this.fetchQueryRejectFns,\n        // since resolve and reject are mutually idempotent. In fact, it would\n        // not be incorrect to let reject functions accumulate over time; it's\n        // just a waste of memory.\n        .then(() =>\n          this.fetchQueryRejectFns.delete(`query:${watchedQuery.queryId}`),\n        );\n    });\n  }\n\n  public generateQueryId() {\n    return String(this.idCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(queryId);\n  }\n\n  public addQueryListener(queryId: string, listener: QueryListener) {\n    this.setQuery(queryId, ({ listeners }) => {\n      listeners.add(listener);\n      return { invalidated: false };\n    });\n  }\n\n  public updateQueryWatch(\n    queryId: string,\n    document: DocumentNode,\n    options: WatchQueryOptions,\n  ) {\n    const { cancel } = this.getQuery(queryId);\n    if (cancel) cancel();\n    const previousResult = () => {\n      let previousResult = null;\n      const { observableQuery } = this.getQuery(queryId);\n      if (observableQuery) {\n        const lastResult = observableQuery.getLastResult();\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n    return this.dataStore.getCache().watch({\n      query: document as DocumentNode,\n      variables: options.variables,\n      optimistic: true,\n      previousResult,\n      callback: newData => {\n        this.setQuery(queryId, () => ({ invalidated: true, newData }));\n      },\n    });\n  }\n\n  // Adds an ObservableQuery to this.observableQueries and to this.observableQueriesByName.\n  public addObservableQuery<T>(\n    queryId: string,\n    observableQuery: ObservableQuery<T>,\n  ) {\n    this.setQuery(queryId, () => ({ observableQuery }));\n  }\n\n  public removeObservableQuery(queryId: string) {\n    const { cancel } = this.getQuery(queryId);\n    this.setQuery(queryId, () => ({ observableQuery: null }));\n    if (cancel) cancel();\n  }\n\n  public clearStore(): Promise<void> {\n    // Before we have sent the reset action to the store,\n    // we can no longer rely on the results returned by in-flight\n    // requests since these may depend on values that previously existed\n    // in the data portion of the store. So, we cancel the promises and observers\n    // that we have issued so far and not yet resolved (in the case of\n    // queries).\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(new InvariantError(\n        'Store reset while query was in flight (not completed in link chain)',\n      ));\n    });\n\n    const resetIds: string[] = [];\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery) resetIds.push(queryId);\n    });\n\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n\n    // begin removing data from the store\n    return this.dataStore.reset();\n  }\n\n  public resetStore(): Promise<ApolloQueryResult<any>[]> {\n    // Similarly, we have to have to refetch each of the queries currently being\n    // observed. We refetch instead of error'ing on these since the assumption is that\n    // resetting the store doesn't eliminate the need for the queries currently being\n    // watched. If there is an existing query in flight when the store is reset,\n    // the promise for it will be rejected and its results will not be written to the\n    // store.\n    return this.clearStore().then(() => {\n      return this.reFetchObservableQueries();\n    });\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery) {\n        const fetchPolicy = observableQuery.options.fetchPolicy;\n\n        observableQuery.resetLastResults();\n        if (\n          fetchPolicy !== 'cache-only' &&\n          (includeStandby || fetchPolicy !== 'standby')\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        this.setQuery(queryId, () => ({ newData: null }));\n        this.invalidate(queryId);\n      }\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public observeQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    observer: Observer<ApolloQueryResult<T>>,\n  ) {\n    this.addQueryListener(\n      queryId,\n      this.queryListenerForObserver(queryId, options, observer),\n    );\n    return this.fetchQuery<T>(queryId, options);\n  }\n\n  public startQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    listener: QueryListener,\n  ) {\n    invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n\n    this.addQueryListener(queryId, listener);\n\n    this.fetchQuery<T>(queryId, options)\n      // `fetchQuery` returns a Promise. In case of a failure it should be caucht or else the\n      // console will show an `Uncaught (in promise)` message. Ignore the error for now.\n      .catch(() => undefined);\n\n    return queryId;\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    variables,\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        {},\n        variables,\n        false,\n      ).map(result => {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          this.dataStore.markSubscriptionResult(\n            result,\n            query,\n            variables,\n          );\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: Subscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchQueryRejectFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchQueryRejectFns.delete(`query:${queryId}`);\n    this.fetchQueryRejectFns.delete(`fetchRequest:${queryId}`);\n    this.getQuery(queryId).subscriptions.forEach(x => x.unsubscribe());\n    this.queries.delete(queryId);\n  }\n\n  public getCurrentQueryResult<T>(\n    observableQuery: ObservableQuery<T>,\n    optimistic: boolean = true,\n  ): {\n    data: T | undefined;\n    partial: boolean;\n  } {\n    const { variables, query, fetchPolicy, returnPartialData } = observableQuery.options;\n    const lastResult = observableQuery.getLastResult();\n    const { newData } = this.getQuery(observableQuery.queryId);\n\n    if (newData && newData.complete) {\n      return { data: newData.result, partial: false };\n    }\n\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return { data: undefined, partial: false };\n    }\n\n    const { result, complete } = this.dataStore.getCache().diff<T>({\n      query,\n      variables,\n      previousResult: lastResult ? lastResult.data : undefined,\n      returnPartialData: true,\n      optimistic,\n    });\n\n    return {\n      data: (complete || returnPartialData) ? result : void 0,\n      partial: !complete,\n    };\n  }\n\n  public getQueryWithPreviousResult<TData, TVariables = OperationVariables>(\n    queryIdOrObservable: string | ObservableQuery<TData, TVariables>,\n  ): {\n    previousResult: any;\n    variables: TVariables | undefined;\n    document: DocumentNode;\n  } {\n    let observableQuery: ObservableQuery<TData, any>;\n    if (typeof queryIdOrObservable === 'string') {\n      const { observableQuery: foundObserveableQuery } = this.getQuery(\n        queryIdOrObservable,\n      );\n      invariant(\n        foundObserveableQuery,\n        `ObservableQuery with this id doesn't exist: ${queryIdOrObservable}`\n      );\n      observableQuery = foundObserveableQuery!;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    const { variables, query } = observableQuery.options;\n    return {\n      previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n      variables,\n      document: query,\n    };\n  }\n\n  public broadcastQueries() {\n    this.onBroadcast();\n    this.queries.forEach((info, id) => {\n      if (info.invalidated) {\n        info.listeners.forEach(listener => {\n          // it's possible for the listener to be undefined if the query is being stopped\n          // See here for more detail: https://github.com/apollostack/apollo-client/issues/231\n          if (listener) {\n            listener(this.queryStore.get(id), info.newData);\n          }\n        });\n      }\n    });\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean = this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = JSON.stringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          byVariables.set(\n            varJson,\n            observable = multiplex(\n              execute(link, operation) as Observable<FetchResult<T>>\n            )\n          );\n\n          const cleanup = () => {\n            byVariables.delete(varJson);\n            if (!byVariables.size) inFlightLinkObservables.delete(serverQuery);\n            cleanupSub.unsubscribe();\n          };\n\n          const cleanupSub = observable.subscribe({\n            next: cleanup,\n            error: cleanup,\n            complete: cleanup,\n          });\n        }\n\n      } else {\n        observable = multiplex(execute(link, operation) as Observable<FetchResult<T>>);\n      }\n    } else {\n      observable = Observable.of({ data: {} } as FetchResult<T>);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  // Takes a request id, query id, a query document and information associated with the query\n  // and send it to the network interface. Returns\n  // a promise for the result associated with that request.\n  private fetchRequest<T>({\n    requestId,\n    queryId,\n    document,\n    options,\n    fetchMoreForQueryId,\n  }: {\n    requestId: number;\n    queryId: string;\n    document: DocumentNode;\n    options: WatchQueryOptions;\n    fetchMoreForQueryId?: string;\n  }): Promise<FetchResult<T>> {\n    const { variables, errorPolicy = 'none', fetchPolicy } = options;\n    let resultFromStore: any;\n    let errorsFromStore: any;\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      const observable = this.getObservableFromLink(\n        document,\n        options.context,\n        variables,\n      );\n\n      const fqrfId = `fetchRequest:${queryId}`;\n      this.fetchQueryRejectFns.set(fqrfId, reject);\n\n      const cleanup = () => {\n        this.fetchQueryRejectFns.delete(fqrfId);\n        this.setQuery(queryId, ({ subscriptions }) => {\n          subscriptions.delete(subscription);\n        });\n      };\n\n      const subscription = observable.map((result: FetchResult<T>) => {\n        if (requestId >= this.getQuery(queryId).lastRequestId) {\n          this.markQueryResult(\n            queryId,\n            result,\n            options,\n            fetchMoreForQueryId,\n          );\n\n          this.queryStore.markQueryResult(\n            queryId,\n            result,\n            fetchMoreForQueryId,\n          );\n\n          this.invalidate(queryId);\n          this.invalidate(fetchMoreForQueryId);\n\n          this.broadcastQueries();\n        }\n\n        if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n          return reject(new ApolloError({\n            graphQLErrors: result.errors,\n          }));\n        }\n\n        if (errorPolicy === 'all') {\n          errorsFromStore = result.errors;\n        }\n\n        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n          // We don't write fetchMore results to the store because this would overwrite\n          // the original result in case an @connection directive is used.\n          resultFromStore = result.data;\n        } else {\n          // ensure result is combined with data already in store\n          const { result, complete } = this.dataStore.getCache().diff<T>({\n            variables,\n            query: document,\n            optimistic: false,\n            returnPartialData: true,\n          });\n\n          if (complete || options.returnPartialData) {\n            resultFromStore = result;\n          }\n        }\n      }).subscribe({\n        error(error: ApolloError) {\n          cleanup();\n          reject(error);\n        },\n\n        complete() {\n          cleanup();\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false,\n          });\n        },\n      });\n\n      this.setQuery(queryId, ({ subscriptions }) => {\n        subscriptions.add(subscription);\n      });\n    });\n  }\n\n  private getQuery(queryId: string) {\n    return (\n      this.queries.get(queryId) || {\n        listeners: new Set<QueryListener>(),\n        invalidated: false,\n        document: null,\n        newData: null,\n        lastRequestId: 1,\n        observableQuery: null,\n        subscriptions: new Set<Subscription>(),\n      }\n    );\n  }\n\n  private setQuery<T extends keyof QueryInfo>(\n    queryId: string,\n    updater: (prev: QueryInfo) => Pick<QueryInfo, T> | void,\n  ) {\n    const prev = this.getQuery(queryId);\n    const newInfo = { ...prev, ...updater(prev) };\n    this.queries.set(queryId, newInfo);\n  }\n\n  private invalidate(\n    queryId: string | undefined,\n    invalidated = true,\n  ) {\n    if (queryId) {\n      this.setQuery(queryId, () => ({ invalidated }));\n    }\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n\n  public checkInFlight(queryId: string) {\n    const query = this.queryStore.get(queryId);\n\n    return (\n      query &&\n      query.networkStatus !== NetworkStatus.ready &&\n      query.networkStatus !== NetworkStatus.error\n    );\n  }\n\n  // Map from client ID to { interval, options }.\n  private pollingInfoByQueryId = new Map<string, {\n    interval: number;\n    timeout: NodeJS.Timeout;\n    options: WatchQueryOptions;\n  }>();\n\n  public startPollingQuery(\n    options: WatchQueryOptions,\n    queryId: string,\n    listener?: QueryListener,\n  ): string {\n    const { pollInterval } = options;\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    // Do not poll in SSR mode\n    if (!this.ssrMode) {\n      let info = this.pollingInfoByQueryId.get(queryId)!;\n      if (!info) {\n        this.pollingInfoByQueryId.set(queryId, (info = {} as any));\n      }\n\n      info.interval = pollInterval!;\n      info.options = {\n        ...options,\n        fetchPolicy: 'network-only',\n      };\n\n      const maybeFetch = () => {\n        const info = this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          if (this.checkInFlight(queryId)) {\n            poll();\n          } else {\n            this.fetchQuery(queryId, info.options, FetchType.poll).then(\n              poll,\n              poll,\n            );\n          }\n        }\n      };\n\n      const poll = () => {\n        const info = this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          clearTimeout(info.timeout);\n          info.timeout = setTimeout(maybeFetch, info.interval);\n        }\n      };\n\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n\n      poll();\n    }\n\n    return queryId;\n  }\n\n  public stopPollingQuery(queryId: string) {\n    this.pollingInfoByQueryId.delete(queryId);\n  }\n}\n","import { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, Cache, DataProxy } from 'apollo-cache';\n\nimport { QueryStoreValue } from '../data/queries';\nimport {\n  getOperationName,\n  tryFunctionOrLogError,\n  graphQLResultHasError,\n} from 'apollo-utilities';\nimport { MutationQueryReducer } from '../core/types';\n\nexport type QueryWithUpdater = {\n  updater: MutationQueryReducer<Object>;\n  query: QueryStoreValue;\n};\n\nexport interface DataWrite {\n  rootId: string;\n  result: any;\n  document: DocumentNode;\n  operationName: string | null;\n  variables: Object;\n}\n\nexport class DataStore<TSerialized> {\n  private cache: ApolloCache<TSerialized>;\n\n  constructor(initialCache: ApolloCache<TSerialized>) {\n    this.cache = initialCache;\n  }\n\n  public getCache(): ApolloCache<TSerialized> {\n    return this.cache;\n  }\n\n  public markQueryResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n    fetchMoreForQueryId: string | undefined,\n    ignoreErrors: boolean = false,\n  ) {\n    let writeWithErrors = !graphQLResultHasError(result);\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markSubscriptionResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n  ) {\n    // the subscription interface should handle not sending us results we no longer subscribe to.\n    // XXX I don't think we ever send in an object with errors, but we might in the future...\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markMutationInit(mutation: {\n    mutationId: string;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n    optimisticResponse: Object | Function | undefined;\n  }) {\n    if (mutation.optimisticResponse) {\n      let optimistic: Object;\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic = mutation.optimisticResponse;\n      }\n\n      this.cache.recordOptimisticTransaction(c => {\n        const orig = this.cache;\n        this.cache = c;\n\n        try {\n          this.markMutationResult({\n            mutationId: mutation.mutationId,\n            result: { data: optimistic },\n            document: mutation.document,\n            variables: mutation.variables,\n            updateQueries: mutation.updateQueries,\n            update: mutation.update,\n          });\n        } finally {\n          this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  }\n\n  public markMutationResult(mutation: {\n    mutationId: string;\n    result: ExecutionResult;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n  }) {\n    // Incorporate the result from this mutation into the store\n    if (!graphQLResultHasError(mutation.result)) {\n      const cacheWrites: Cache.WriteOptions[] = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      }];\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        Object.keys(updateQueries).forEach(id => {\n          const { query, updater } = updateQueries[id];\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = this.cache.diff({\n            query: query.document,\n            variables: query.variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = tryFunctionOrLogError(() =>\n              updater(currentQueryResult, {\n                mutationResult: mutation.result,\n                queryName: getOperationName(query.document) || undefined,\n                queryVariables: query.variables,\n              }),\n            );\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: query.document,\n                variables: query.variables,\n              });\n            }\n          }\n        });\n      }\n\n      this.cache.performTransaction(c => {\n        cacheWrites.forEach(write => c.write(write));\n\n        // If the mutation has some writes associated with it then we need to\n        // apply those writes to the store by running this reducer again with a\n        // write action.\n        const { update } = mutation;\n        if (update) {\n          tryFunctionOrLogError(() => update(c, mutation.result));\n        }\n      });\n    }\n  }\n\n  public markMutationComplete({\n    mutationId,\n    optimisticResponse,\n  }: {\n    mutationId: string;\n    optimisticResponse?: any;\n  }) {\n    if (optimisticResponse) {\n      this.cache.removeOptimistic(mutationId);\n    }\n  }\n\n  public markUpdateQueryResult(\n    document: DocumentNode,\n    variables: any,\n    newResult: any,\n  ) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables,\n      query: document,\n    });\n  }\n\n  public reset(): Promise<void> {\n    return this.cache.reset();\n  }\n}\n","export const version = \"2.6.10\"","import {\n  ApolloLink,\n  FetchResult,\n  GraphQLRequest,\n  execute,\n} from 'apollo-link';\nimport { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, DataProxy } from 'apollo-cache';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { QueryManager } from './core/QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  Resolvers,\n} from './core/types';\nimport { ObservableQuery } from './core/ObservableQuery';\nimport { LocalState, FragmentMatcher } from './core/LocalState';\nimport { Observable } from './util/Observable';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  WatchQueryFetchPolicy,\n} from './core/watchQueryOptions';\n\nimport { DataStore } from './data/store';\n\nimport { version } from './version';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions>;\n  query?: Partial<QueryOptions>;\n  mutate?: Partial<MutationOptions>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport default class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public store: DataStore<TCacheShape>;\n  public cache: ApolloCache<TCacheShape>;\n  public readonly queryManager: QueryManager<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions = {};\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations. Passing\n   *                               `{ freezeResults: true }` to the `InMemoryCache` constructor\n   *                               can help enforce this immutability.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    // If a link hasn't been defined, but local state resolvers have been set,\n    // setup a default empty link.\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n\n    if (!link || !cache) {\n      throw new InvariantError(\n        \"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n        \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n        \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\"\n      );\n    }\n\n    // remove apollo-client supported directives\n    this.link = link;\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    // Attach the client instance to window to let us be found by chrome devtools, but only in\n    // development mode\n    const defaultConnectToDevTools =\n      process.env.NODE_ENV !== 'production' &&\n      typeof window !== 'undefined' &&\n      !(window as any).__APOLLO_CLIENT__;\n\n    if (\n      typeof connectToDevTools === 'undefined'\n        ? defaultConnectToDevTools\n        : connectToDevTools && typeof window !== 'undefined'\n    ) {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self\n      ) {\n        // First check if devtools is not installed\n        if (\n          typeof (window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined'\n        ) {\n          // Only for Chrome\n          if (\n            window.navigator &&\n            window.navigator.userAgent &&\n            window.navigator.userAgent.indexOf('Chrome') > -1\n          ) {\n            // tslint:disable-next-line\n            console.debug(\n              'Download the Apollo DevTools ' +\n                'for a better development experience: ' +\n                'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm',\n            );\n          }\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.queryStore.getStore(),\n              mutations: this.queryManager.mutationStore.getStore(),\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      },\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifer, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = {\n        ...this.defaultOptions.watchQuery,\n        ...options,\n      } as WatchQueryOptions<TVariables>;\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = { ...this.defaultOptions.query, ...options } as QueryOptions<\n        TVariables\n      >;\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<T = any, TVariables = OperationVariables>(\n    options: MutationOptions<T, TVariables>,\n  ): Promise<FetchResult<T>> {\n    if (this.defaultOptions.mutate) {\n      options = {\n        ...this.defaultOptions.mutate,\n        ...options,\n      } as MutationOptions<T, TVariables>;\n    }\n\n    return this.queryManager.mutate<T>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    const result = this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    const result = this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Sugar for writeQuery & writeFragment\n   * This method will construct a query from the data object passed in.\n   * If no id is supplied, writeData will write the data to the root.\n   * If an id is supplied, writeData will write a fragment to the object\n   * specified by the id in the store.\n   *\n   * Since you aren't passing in a query to check the shape of the data,\n   * you must pass in an object that conforms to the shape of valid GraphQL data.\n   */\n  public writeData<TData = any>(\n    options: DataProxy.WriteDataOptions<TData>,\n  ): void {\n    const result = this.cache.writeData<TData>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * This initializes the query manager that tracks queries and the cache\n   */\n  public initQueryManager(): QueryManager<TCacheShape> {\n    invariant.warn(\n      'Calling the initQueryManager method is no longer necessary, ' +\n        'and it will be removed from ApolloClient in version 3.0.',\n    );\n    return this.queryManager;\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}